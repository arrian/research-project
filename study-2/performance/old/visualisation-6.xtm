
(sys:load "libs/external/cairo.xtm")

;;---------------------------------

(bind-val VU_LEVELS_RMS |16,SAMPLE|*)

(bind-func rms_power
  (lambda (data:SAMPLE* len)
    (let ((data_vec:/4,SAMPLE/* (cast data))
          (sum_vec:/4,SAMPLE/* (alloc))
          (j 0))
      (dotimes (j (/ len 4))
        (pset! sum_vec 0 (+ (* (pref-ptr data_vec j)
                               (pref-ptr data_vec j))
                            sum_vec)))
      (/ (+ (vref sum_vec 0) (vref sum_vec 1)
            (vref sum_vec 2) (vref sum_vec 3))
         (convert len)))))

(bind-func vu_meter_c
  "frame_size must be a multiple of 4 (since the RMS sum is SIMD-optimised)"
  (lambda (ninst frame_size)
    (let ((data:SAMPLE* (zalloc (* ninst frame_size)))
          (counters:i64* (zalloc ninst)))
      (lambda (chan inst_idx in)
        (if (or (< inst_idx 0)
                (> inst_idx ninst)
                (<> chan 0))
            in
            (let ((counter (pref counters inst_idx)))
              (pset! data (+ (* inst_idx frame_size) counter) in)
              (pset! counters inst_idx (% (+ counter 1) frame_size))
              (if (= (% counter frame_size) 0)
                  (aset! VU_LEVELS_RMS inst_idx
                         (rms_power (pref-ptr data (* inst_idx frame_size))
                                    frame_size)))
              in))))))

(bind-func vu_level
  (lambda (inst_idx:i32)
    (if (or (< inst_idx 0)
            (> inst_idx 16))
        (begin (println "Error: index must be between 0 and 16.")
               0.)
        (aref VU_LEVELS_RMS inst_idx))))

;;--------------------------------------------------------------

(define ctx (gl:make-ctx ":0.0" #f 0.0 0.0 900.0 600.0))

(bind-val threshold type (* 44100 10));; number of samples instrument needs to be quiet to remove from graphics 

(bind-func draw_segment
  (lambda (cx cy start_radius end_radius)
    ))

(bind-val previous double 0.0)

(bind-func draw
  (lambda (cr t:double)
    (cairo_set_line_width cr 1.0)
        
    (let ((count:double 10.0)
          (seg_size:double (/ TWOPI 10.0))
          (j:double 0.0))
      (dotimes (j count)
            (cairo_set_source_rgba cr (0.0) (* (/ 1.0 count) j) 1.0 1.0)
            (cairo_move_to cr 450.0 300.0)
            (cairo_arc cr 450.0 300.0 (+ 200.0 (* 400.0 (ftod (vu_level (if (= (modulo j 2.0) 0.0) 1 2))))) (* j seg_size) (+ seg_size (* j seg_size)))
            ;;(cairo_line_to cr 100.0 300.0)
            (cairo_close_path cr)
            (cairo_fill cr))
      (let ((i 0.0))
        (dotimes (i 100.0)
          (let ((current:double (* (* 2.0 (cos i)) (+ 100.0 (* 2000.0 (ftod (vu_level 1))) (* 2000.0 (ftod (vu_level 2)))))))
                (set! current (/ 2.0 (+ current previous)))
                (cairo_move_to cr 450.0 300.0)
                (cairo_set_source_rgba cr 1.0 1.0 0.4 0.4)
                (cairo_arc cr 450.0 300.0 current 0.0 TWOPI)
                (set! previous current)
                (cairo_fill cr)))))))

(bind-func draw
  (lambda (cr t:double)
    (cairo_set_line_width cr 1.0)
        
    (let ((count:double 10.0)
          (seg_size:double (/ TWOPI 10.0))
          (j:double 0.0))
      (dotimes (j count)
            (cairo_set_source_rgba cr (0.0) (* (/ 1.0 count) j) 1.0 1.0)
            (cairo_move_to cr 450.0 300.0)
            (cairo_arc cr 450.0 300.0 (+ 200.0 (* 400.0 (ftod (vu_level (if (= (modulo j 2.0) 0.0) 1 2))))) (* j seg_size) (+ seg_size (* j seg_size)))
            ;;(cairo_line_to cr 100.0 300.0)
            (cairo_close_path cr)
            (cairo_stroke cr)))))

(bind-func cairo_draw
  (let ((surface (cairo_image_surface_create CAIRO_FORMAT_RGB24 900 600))
  (cr (cairo_create surface)))
    (lambda (t:double)
      (cairo_set_source_rgba cr 0.0 0.0 0.0 1.0)
      (cairo_paint cr)
      (draw cr t)
      ;(cairo_surface_flush surface)
      (cairo_image_surface_get_data surface))))
      
(bind-func gl_draw
  (lambda ()
    (glLoadIdentity)
    (gl_load_tex_bgr 900 600 4 GL_UNSIGNED_BYTE (cairo_draw (i64tod (now))) 5)
    (gl_draw_img_reverse -1.0 -1.0 2.0 2.0 180.0 5)
    void))

(define cairo-animation
  (lambda (beat dur)
    (gl_draw)
    (gl:swap-buffers ctx)    
    (callback (*metro* (+ beat (* .5 dur))) 'cairo-animation (+ beat dur) dur)))

(cairo-animation (*metro* 'get-beat 4) 1/20 0)


;;--------------------------------------------------------------

(define-sampler kit sampler_note_hermite_c sampler_fx)

(bind-func dsp:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* 100000
  ;; VU metering at 30Hz, 4 distinct channels
  (let ((vu_meter (vu_meter_c 8 (/ 44100 15))))
    (lambda (in time chan dat)
      (+ 
         (vu_meter chan 1 (epad in time chan dat))
         (vu_meter chan 2 (fmsynth in time chan dat))
         (vu_meter chan 0 (* 2.0 (kit in time chan dat)))
         ))))

(dsp:set! dsp)

(define fsynth
  (lambda (beat dur)
    (play-note (now) epad (random '(10 60 67 10)) 70 44100)
    (callback (*metro* (+ beat (* 4.0 dur))) 'fsynth (+ beat dur) dur)))

(fsynth (*metro* 'get-beat 4) 1/4)

(define fsynth2
  (lambda (beat dur)
    (play-note (now) fmsynth (random '(10 55 10)) 80 44100)
    (callback (*metro* (+ beat (* 1.0 dur))) 'fsynth2 (+ beat dur) dur)))

(fsynth2 (*metro* 'get-beat 4) 1/2)


;;------------------------------
(define *user-sample-dir* "/Users/arrian/Projects/Music/Assets/samples")
(load "/Users/arrian/Dev/extempore-hackday/sampler-maps.xtm")

(sm-load-map kit *808-kit-map*)

(play-note (now) kit (random '(46 47)) 80 44100)

(define drumloop
  (lambda (beat dur)
    (if (= (modulo beat 1) 0)
        (play kit (random 46 64) 120 dur))
    (if (= (modulo beat 1/2) 0)
      
        (play kit (random 47 55) 90 dur))
    (if (= (modulo beat 1/1) 0)
      (play kit 54 100 (* 2.0 dur)))
    (callback (*metro* (+ beat (* .5 dur))) 'drumloop (+ beat dur) dur)))

(drumloop (*metro* 'get-beat 4) 1/4)


