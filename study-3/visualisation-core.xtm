;; Visualisation Core
;;
;; Main entry point for study 3.

(sys:load "libs/core/adt.xtm")

(bind-func cons:[List:<!a,List*>*,!a,List:<!a,List*>*]*
  (lambda (x y)
    (let ((obj (halloc)));; custom heap allocation
      (tset! obj 0 x)
      (tset! obj 1 y)
      obj)))

(bind-func maxd
  (lambda (a:double b:double)
    (if (>= a b) a b)))

(bind-func mind
  (lambda (a:double b:double)
    (if (< a b) a b)))

(bind-func get_user_name
  (lambda ()
    (getenv "USER")))

(define *study-3-dir*
  (let ((user (cptr->string (get_user_name))))
    (cond ((string=? user "ben")
           "/Users/ben/Code/xtm/arrian-research-project/study-3")
          ((string=? user "arrian")
            "/Users/Arrian/Dev/research-project/study-3")
          (else "unknown"))))

(define *code-lib* (string-append *study-3-dir* "/code-lib/bin/code.dylib"))
(sys:load (string-append *study-3-dir* "/code-lib/code.xtm"))

(define *app-lib* (string-append *study-3-dir* "/app-lib/bin/app.dylib"))
(define *app-lib-resources* (string-append *study-3-dir* "/resources/default.pak"))
(sys:load (string-append *study-3-dir* "/app-lib/app.xtm"))

(sys:load (string-append *study-3-dir* "/visualisation-core/code-manager.xtm"))
(sys:load (string-append *study-3-dir* "/visualisation-core/visual-manager.xtm"))
(sys:load (string-append *study-3-dir* "/visualisation-core/interface-manager.xtm"))

(sys:load (string-append *study-3-dir* "/visualisation-core/transition.xtm"))
(sys:load (string-append *study-3-dir* "/visualisation-core/attractor.xtm"))
(sys:load (string-append *study-3-dir* "/visualisation-core/connector.xtm"))

(sys:load (string-append *study-3-dir* "/visualisation-core/widget.xtm"))

(gl:set-context *gl-ctx*)

(define update-loop
  (lambda (time delta-t)
    (handle_events)
    (draw)
    (gl:swap-buffers *gl-ctx*)
    (callback (+ time (* *second* delta-t) 0.5)
              'update-loop
              (+ time (* *second* delta-t)) 
              delta-t)))

(update-loop (now) 1/30)




