;; Interface Manager
;;
;; This manager handles all interfacing between Extempore and the 
;; source code editor.

(bind-val EVENT_QUEUE eventqueue* 0)

(bind-func eventqueue_init
  (lambda ()
  		(set! EVENT_QUEUE (eventqueue_create))))

(eventqueue_init)

;; Handles the /interface/selection address. Accepts an unlimited number
;; of arguments. The first argument is an integer defining the number remaining
;; argument integers. The remaining argument integers define the selection bounds
;; in the format 'start end start end ...'.
(bind-func handle_selection
  (lambda (args:i32*)
  	;; (printf "%s\n" args)
  	(let ((i:i32 0))
      (code_manager_select CODE_MANAGER (unswap32i (pref args 1)))
      (widget_list_update))
	  	;; (printf "selection ")
	  	;; (dotimes (i (unswap32i (pref args 0)))
			;;   (printf "%d " (unswap32i (pref args (+ i 1)))))
	  	;;   (printf "\n")
	void))

;; Handles the /interface/code address. Accepts one argument that is the 
;; current 
(bind-func handle_code
  (lambda (args:i8*)
  	;; (printf "code %.80s...\n" args)
    (code_manager_update CODE_MANAGER args)
  	(widget_list_update)
  	void))
  	
	;;(printf "code %.80s...\n" args)

;; Handles the /interface/evaluate address. Accepts one argument that is the 
;; code evaluated.
(bind-func handle_evaluate
  (lambda (args:i8*)
    (code_manager_evaluate CODE_MANAGER args)
    (widget_list_update)
    void))

;; Handles the /interface/keyboard address. Accepts one argument that is the
;; key pressed.
(bind-func handle_keyboard
  (lambda (args:i32*)
	  void))

;; Handles the /interface/error address. Accepts one argument that is 
;; the error message.
(bind-func handle_error
  (lambda (args:i8*)
    (code_manager_error CODE_MANAGER args)
    (widget_list_update)
    void))

;; Handles the /interface/focus address. Accepts one argument that is the
;; name of the file focussed.
(bind-func handle_focus
  (lambda (args:i8*)
    ;; (code_manager_focus CODE_MANAGER args)
    (widget_list_update)
    void))

(bind-func handle_event
  (lambda (e:event*)
  	(let ((data (bitcast (event_get_data e) i32*))
  		    (address (event_get_address e)))
    	;; (printf "handling %p\n" (event_get_data e))
		  (cond ((= (strcmp address "/interface/selection") 0) (handle_selection data));; args: count start end start end... . eg. 4 0 3 10 13
      			((= (strcmp address "/interface/code") 0) (handle_code (event_get_data e)));; args: code
      			((= (strcmp address "/interface/evaluate") 0) (handle_evaluate (event_get_data e))) ;; args: evaluated_code
            ;; ((= (strcmp address "/interface/keyboard") 0) (handle_keyboard data));; unused
      			((= (strcmp address "/interface/error") 0) (handle_error (event_get_data e))) ;; args: message
            ((= (strcmp address "/interface/focus") 0) (handle_focus (event_get_data e))) ;; args: file_name
  			    (else void))
		  (printf "%s\n" address)
      void)))

;; Handles routing of addresses for messages in the queue.
(bind-func handle_events
  (lambda ()
	(let ((x (eventqueue_size EVENT_QUEUE));; limit handling to the current size of the queue
		  (i 0))
		;; (printf "handling %d events\n" x)
		(dotimes (i x)
			(let ((e (eventqueue_pop EVENT_QUEUE)))
				(handle_event e)
				(event_destroy e)))
		void)))

;; OSC receive function. Stores messages in a queue to be accessed by the main thread.
(bind-func receive
  (lambda (address:i8* types:i8* args:i8*)
  	;; (printf "received %s\n" types)
  	(let ((e:event* (event_create (now) address types args)))
  		(eventqueue_push EVENT_QUEUE e))
  	void))

;; OSC start the receive server.
(io:osc:start-server 9880 "receive" (llvm:get-native-function "receive"))

(handle_events)

