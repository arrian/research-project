;; Widget that handles the active and inactive state of specific code.

;; 0 name
;; 1 code
;; 2 code graph pointer
;; 3 next callback time (now-based)
;; 4 initial callback time (now-based)
(bind-type Widget <String*,String*,i8*,i64,i64>)

(bind-func widget_get_name
  (lambda (w:Widget*)
    (tref w 0)))

(bind-func widget_set_name
  (lambda (w:Widget* name:String*)
    (tset! w 0 name)))

(bind-func widget_get_code
  (lambda (w:Widget*)
    (tref w 1)))

(bind-func widget_set_code
  (lambda (w:Widget* code:String*)
    (tset! w 1 code)))

(bind-func widget_get_graph
  (lambda (w:Widget*)
    (tref w 2)))

(bind-func widget_set_graph
  (lambda (w:Widget* graph:i8*)
    (tset! w 2 graph)))

(bind-func widget_get_next_time
  (lambda (w:Widget*)
    (tref w 3)))

(bind-func widget_set_next_time
  (lambda (w:Widget* time:i64)
    (tset! w 3 time)))

(bind-func widget_get_initial_time
  (lambda (w:Widget*)
    (tref w 4)))

(bind-func widget_set_intial_time
  (lambda (w:Widget* time:i64)
    (tset! w 4 time)))

(bind-func widget_update
  (lambda (w:Widget* graph:code_graph*)
    ;;(poly_entity_set_position graph 0.0 -50.0)
    ;;(widget_set_code w (Str code))
    (printf "%p\n" (code_graph_get_widget graph))
    (let ((i 0)
          (segments 9))

      (dotimes (i (code_graph_get_element_count graph))
        (let ((e:code_element* (code_graph_get_element graph i)))
          (if (null? (code_element_get_user_data e)) 
            (let ((circle (poly_scene_primitive_create_circle (code_element_get_size e) (code_element_get_size e) segments))) 
                (code_element_set_user_data e circle)
                (poly_entity_add_child (code_graph_get_entity graph) circle)))

          (let ((circle (code_element_get_user_data e)))
              (poly_entity_set_position circle (code_element_get_x e) (code_element_get_y e))
              (if (= (i32toi1 1) (code_element_is_valid e)) 
                (poly_scene_primitive_set_circle_options circle (code_element_get_size e) (code_element_get_size e) segments) 
                (poly_scene_primitive_set_circle_options circle 0.5 0.5 3))
              (poly_entity_set_color circle (code_element_get_r e) (code_element_get_g e) (code_element_get_b e) 1.0)
              (printf "valid: %d\n" (code_element_is_valid e))
            )
            
          )
        ))
    ;; (println "name:" (widget_get_name w) "code:" (widget_get_code w))
    0))

(bind-func widget_print
  (lambda (w:Widget*)
    (println "name:" (widget_get_name w) "code:" (widget_get_code w))
    void))

;;;;;;;;;;;;;;;;;;;

(bind-val WIDGET_LIST List:<Widget*,List*>*)

(bind-func widget_list_init
  (lambda ()
    (let ((n:List:<Widget*,List*>* null))
      (set! WIDGET_LIST n))))

(widget_list_init)

(bind-func widget_list_add
  (lambda (name:i8* code:i8* time_next time_initial)
    (let ((w (Widget (Str name) (Str code) null time_next time_initial)))
    (set! WIDGET_LIST (cons w WIDGET_LIST))
    w)))

(bind-func widget_list_remove
  (lambda (name)
    (set! WIDGET_LIST (filter (lambda (w)
                            (not (equal name (widget_get_name w))))
                          WIDGET_LIST))))

;; (bind-func widget_list_find
;;   (lambda ()
;;     ))

(bind-func widget_list_update
  (lambda ()
    (let ((i 0))
      (dotimes (i (code_manager_get_graph_count CODE_MANAGER))
          (let ((graph (code_manager_get_graph CODE_MANAGER i)))
              (if (null? (code_graph_get_widget graph)) 
                (begin 
                  (code_graph_set_widget graph (bitcast (widget_list_add "test" "(test)" 0 0) i8*))
                  (let ((entity (poly_scene_primitive_create_circle 20.0 20.0 4)))
                      (code_graph_set_entity graph entity)
                      
                      (poly_scene_add_child POLY_SCENE entity)
                    )))
                  

              (widget_update (bitcast (code_graph_get_widget graph) Widget*) graph)
              (poly_entity_set_color (code_graph_get_entity graph) 1.0 1.0 0.0 1.0)
              (poly_entity_set_position (code_graph_get_entity graph) (+ -600.0 (* 30.0 (i32tod i))) 0.0)
              )))
    void))

;; (widget_list_update "(bind-val WIDGET_LIST List:<Widget*,List*>*)" 1.0)


;;Needs beat, duration and widget index (TODO: should default to -1)
(define cv-callback
  (lambda (time cb-sym . args)
      ;; (widget_update_active (widget_list_find (symbol->string cb-sym)) (real->integer time))
      (apply callback 
        (cons time (cons cb-sym args)))))


;; Testing

;; (widget_list_add (random (list "test1" "test2" "test3" "test4" "test5" "test6" "test7")) (random (list "(test1)" "(test2)" "(test3)" "(test4)" "(test5)" "(test6)" "(test7)")) (random 100 200) (random 0 100))




