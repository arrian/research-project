;; Widget to handle the active and inactive state of specific code.

(bind-val VERTICAL_COUNT i64 4)
(bind-val SPACING double 250.0)
(bind-val OFFSET_X double 750.0)
(bind-val OFFSET_Y double 350.0)
(bind-val EPSILON double 0.3)
(bind-val SCALE double 1.5)
(bind-val WIDGET_SIZE double 100.0)

;; (bind-func set
;;   (lambda ()
;;     (set! SCALE 1.5)
;;     ))

;; (set)

;; (bind-func set2
;;   (lambda ()
;;     (set! VERTICAL_COUNT 4)
;;     ))

;; (set2)

;; Utility ;;;;;;;;;;;;;;;;;

(bind-func get_x_for_index
  (lambda (index)
    (- 0.0 (- (* SPACING (i64tod (/ index VERTICAL_COUNT))) OFFSET_X))))

(bind-func get_y_for_index
  (lambda (index)
    (- 0.0 (- (* SPACING (i64tod (% index VERTICAL_COUNT))) OFFSET_Y))))

(bind-func is_close
  (lambda (d1:double d2:double)
    (and (<= d1 (+ d2 EPSILON)) (>= d1 (- d2 EPSILON)))
    ))

;; Widget ;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-type Widget <i64,Attractor*,AttractorList*,i1,i64>);; id, main entity, child entities, should destroy,state_index

(bind-func widget_create
  (lambda (id:i64 x:double y:double size:double index:i64)
    (let ((attractor (attractor_create id POLY_SCENE null #t x y size 1.0 0.0 0.0 1.0)))
        (printf "creating widget %d at %d,%d\n" id x y)
        (Widget_h id attractor null #f index))))

(bind-func widget_get_id
  (lambda (w:Widget*)
    (tref w 0)))

(bind-func widget_get_attractor
  (lambda (w:Widget*)
    (tref w 1)))

(bind-func widget_get_children
  (lambda (w:Widget*)
    (tref w 2)))

;; Defines if this widget has been marked for destruction
(bind-func widget_should_destroy
  (lambda (w:Widget*)
    (tref w 3)))

(bind-func widget_should_not_destroy
  (lambda (w:Widget*)
    (not (widget_should_destroy w))))

(bind-func widget_get_index
  (lambda (w:Widget*)
    (tref w 4)))

(bind-func widget_set_destroy
  (lambda (w:Widget* destroy:i1)
    (tset! w 3 destroy)))

(bind-func widget_add_child
  (lambda (w:Widget* a:Attractor*)
    (tset! w 2 (cons a (tref w 2)))
    w))

(bind-func widget_set_children
  (lambda (w:Widget* c:AttractorList*)
    (tset! w 2 c)
    w))

(bind-func widget_set_index
  (lambda (w:Widget* index)
    (tset! w 4 index)
    (attractor_set_position 
      (widget_get_attractor w)
      (get_x_for_index index)
      (get_y_for_index index))))

(bind-func widget_find_children
  (lambda (w:Widget* id:i64)
      (filter (lambda (a) (equal id (attractor_get_id a))) (widget_get_children w))))

(bind-func widget_apply_inwards_force
  (lambda (w:Widget*)
      (let ((x (attractor_get_x (widget_get_attractor w)))
            (y (attractor_get_y (widget_get_attractor w)))
            (force (* 0.8 (size_get_current (attractor_get_size (widget_get_attractor w))))))
          (for-each (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- x (attractor_get_x a))) (* force (- y (attractor_get_y a)))) 0) (widget_get_children w)))))

(bind-func widget_apply_outwards_force
  (lambda (w:Widget*)
      (let ((x (attractor_get_x (widget_get_attractor w)))
            (y (attractor_get_y (widget_get_attractor w)))
            (force 500.0))
          (for-each (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- 0.0 (- x (attractor_get_x a)))) (* force (- 0.0 (- y (attractor_get_y a))))) 0) (widget_get_children w)))))

(bind-func widget_apply_circular_force
  (lambda (w:Widget*)
      (let ((x (attractor_get_x (widget_get_attractor w)))
            (y (attractor_get_y (widget_get_attractor w)))
            (force 50.0))
          (for-each (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- 0.0 (- y (attractor_get_y a)))) (* force (- x (attractor_get_x a)))) 0) (widget_get_children w)))))

(bind-func widget_set_friction
  (lambda (w:Widget* friction:double)
    (for-each (lambda (a) (poly_physics_entity_set_friction (attractor_get_physics_entity a) friction)) (widget_get_children w))
    void))

(bind-func widget_set_linear_damping
  (lambda (w:Widget* damping:double)
    (for-each (lambda (a) (poly_physics_entity_set_linear_damping (attractor_get_physics_entity a) damping)) (widget_get_children w))
    void))

(bind-func widget_set_angular_damping
  (lambda (w:Widget* damping:double)
    (for-each (lambda (a) (poly_physics_entity_set_angular_damping (attractor_get_physics_entity a) damping)) (widget_get_children w))
    void))

(bind-func widget_slow
  (lambda (w:Widget*)
    (widget_set_linear_damping w 80.0)
    (widget_set_angular_damping w 80.0)
    void))

(bind-func widget_fast
  (lambda (w:Widget*)
    (widget_set_linear_damping w 0.0)
    (widget_set_angular_damping w 20.0)
    void))

(bind-func widget_update_line
  (lambda (w:Widget* line:line*)
      (let ((found #f)
            (id (line_get_id line))
            (children (widget_get_children w)))
        (widget_apply_inwards_force w)
        ;; (widget_apply_circular_force w)
        (for-each (lambda (a) 
            (if (= id (attractor_get_id a)) 
              (begin
                (attractor_set_destroy a #f)
                (set! found #t)
                (attractor_update a)
                (let ((size (* SCALE (/ (i64tod (strlen (line_get_code line))) 1.0))))
                  (if (and (not (is_close size (size_get_current (attractor_get_size a))))
                      (size_transition_is_complete (attractor_get_size a)));;(<> size (size_get_current (attractor_get_size a)))
                      (begin 
                        (attractor_set_target_color_variate (widget_get_attractor w) RED TRANSITION_TIME);;1.0 1.0 0.0 1.0);;show which function is being edited
                        (attractor_set_target_size a size)
                        (attractor_set_target_color_variate a RED TRANSITION_TIME))
                    ))
                (if (color_transition_is_complete (attractor_get_color a)) 
                      (begin 
                        
                        (cond
                            ((line_is_selected line) (attractor_set_target_color_variate a YELLOW (random 10000 50000))) 
                            ((line_is_active line) (attractor_set_target_color_variate a (color_by_index (widget_get_index w)) (random 10000 50000)));;was GREEN
                            (else (attractor_set_target_color_variate a WHITE (random 10000 50000))))
                        ))
                void)
              (begin 
                void)))
          children)
        (if (found)
          (begin 
            children)
          (begin
            ;; (let ((attractor (attractor_create id POLY_SCENE (widget_get_attractor w) #f (i64tod (code_manager_get_cursor_x CODE_MANAGER)) (i64tod (code_manager_get_cursor_y CODE_MANAGER)) 10.0 (random 0.5 1.0) (random) 0.0 (random 0.6 1.0))))
            (let ((attractor (attractor_create id POLY_SCENE (widget_get_attractor w) #f (attractor_get_x (widget_get_attractor w)) (attractor_get_y (widget_get_attractor w)) 10.0 (random 0.5 1.0) (random) 0.0 (random 0.6 1.0))))
              (cons attractor children))
            )
          )
      )))

(bind-func widget_update
  (lambda (w:Widget* state:function*)
    (let ((i 0)
          (line_count (function_lines_count state)))

        ;; updating attractor position
        (if (<> (widget_get_index w) (function_get_index state)) 
                  (widget_set_index w (function_get_index state)))

        (attractor_update (widget_get_attractor w))
        (for-each (lambda (a) (attractor_set_destroy a #t)) (widget_get_children w))
        (dotimes (i line_count)
            (let ((line (function_lines_get state i)))
                (widget_set_children w (widget_update_line w line))))
        (for-each attractor_destroy (filter attractor_should_destroy (widget_get_children w)));;destroy all children marked for deletion
        (widget_set_children w (filter (lambda (a) (not (attractor_should_destroy a))) (widget_get_children w)))
        void)))

(bind-func widget_print
  (lambda (w:Widget*)
    (printf "widget %d: %p\n" (widget_get_id w) w)
    void))

(bind-func widget_destroy:[Widget*,Widget*]*
  (lambda (w:Widget*)
      (attractor_destroy (widget_get_attractor w))
      (for-each attractor_destroy (widget_get_children w))
    null))

;; Widget List ;;;;;;;;;;;;;;;;;;;;;
(bind-alias WidgetList List:<Widget*,List*>)

(bind-func widget_list_clear:[WidgetList*,WidgetList*]*
  (lambda (wl:WidgetList*)
    (for-each widget_destroy wl)
    null))

(bind-func widget_list_remove
  (lambda (wl:WidgetList* w:Widget*)
      (widget_destroy w)
      (cond ((= w (car wl)) (cdr wl))
            (else (cons (car wl) (widget_list_remove (cdr wl) w))))))

(bind-func widget_list_print
  (lambda (wl:WidgetList*)
    (printf "list -----------\n")
    (for-each widget_print wl)
    (printf "length: %d\n" (length wl))
    (printf "---------------\n")))


(bind-func random_discrete
  (lambda ()
    (- (* 150.0 (i64tod (random 1 6))) 400.0)))

(bind-func widget_list_update_state
  (lambda (wl:WidgetList* state:function*)
      (let ((found #f)
            (id (function_get_id state)))
        (for-each (lambda (w) 
          (if (equal id (widget_get_id w))
            (begin
              ;; (printf "test\n")
              (widget_set_destroy w #f)
              (set! found #t)
              (if (function_is_selected state) 
                (begin 
                  ;; (printf "id %d is selected\n" id)
                  (connector_update (attractor_get_x (widget_get_attractor w)) (attractor_get_y (widget_get_attractor w)) 100.0 100.0 (attractor_get_y (widget_get_attractor w)))
                  ;; (widget_apply_circular_force w)
                  ;; (poly_physics_entity_set_velocity (attractor_get_physics_entity (widget_get_attractor w)) 1000.0 1000.0)
                  ;; (widget_apply_inwards_force w)
                  ;; (if (color_transition_is_complete (attractor_get_color (widget_get_attractor w))) (attractor_set_target_color_variate (widget_get_attractor w) YELLOW TRANSITION_TIME))
                  ()
                  void)
                (if (color_transition_is_complete (attractor_get_color (widget_get_attractor w))) 
                  (if (function_is_active state) 
                    (begin
                      (widget_fast w)
                      (widget_apply_circular_force w)
                      ;; (widget_apply_inwards_force w)
                      (attractor_set_target_color_variate (widget_get_attractor w) (color_by_index (widget_get_index w)) 15000)
                      void);;was DARK_GREEN
                    (begin
                      (widget_slow w)
                      (attractor_set_target_color_variate (widget_get_attractor w) GREY 150000)
                      void))))
              (widget_update w state)
              void)
            (begin void))) 
        wl)
        (if (found)
          wl
          (cons (widget_create id (get_x_for_index (function_get_index state)) (get_y_for_index (function_get_index state)) WIDGET_SIZE (function_get_index state)) wl)))))

(bind-func widget_list_update
  (lambda (wl:WidgetList*)
      (let ((i 0)
            (nw:WidgetList* wl)
            (state_count (code_manager_functions_count CODE_MANAGER)))
          ;; (widget_list_print wl)
          (for-each (lambda (w) (widget_set_destroy w #t)) nw)
          (dotimes (i state_count)
              (let ((state (code_manager_functions_get CODE_MANAGER i)))
                  (set! nw (widget_list_update_state nw state))))
          (for-each widget_destroy (filter widget_should_destroy nw))
          (filter widget_should_not_destroy nw))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Custom callback 

(define cv-callback
  (lambda (time cb-sym . args)
      ;; (widget_update_active (widget_list_find (symbol->string cb-sym)) (real->integer time))
      (apply callback 
        (cons time (cons cb-sym args)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-val WIDGET_LIST_TEST WidgetList* 0)


(bind-func widget_list_test_init
  (lambda ()
    (let ((n:List:<Widget*,List*>* null))
      (set! WIDGET_LIST_TEST n))))

(widget_list_test_init)

(bind-func update
  (lambda ()
    (memzone 1000000
      (set! WIDGET_LIST_TEST (widget_list_update WIDGET_LIST_TEST)))
      void))
