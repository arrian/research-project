;; Widget that handles the active and inactive state of specific code.

;; (sys:load "libs/core/adt.xtm")

;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Globals

(bind-val TRANSITION_TIME i64 400)
(bind-val CIRCLE_TYPE i64 8)
(bind-val CIRCLE_SEGMENTS i64 6)
(bind-val ATTRACTION_FACTOR double 500.0)

;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Utility

(bind-func maxd
  (lambda (a:double b:double)
    (if (>= a b) a b)))

(bind-func mind
  (lambda (a:double b:double)
    (if (<= a b) a b)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Color
(bind-type Color <double,double,double,double>);;r,g,b,a

(bind-func color_set_rgba
  (lambda (c:Color* r:double g:double b:double a:double)
      (tset! c 0 r)
      (tset! c 1 g)
      (tset! c 2 b)
      (tset! c 3 a)
    void))

(bind-func color_set_color
  (lambda (c:Color* from:Color*)
      (tset! c 0 (tref from 0))
      (tset! c 1 (tref from 1))
      (tset! c 2 (tref from 2))
      (tset! c 3 (tref from 3))
    ))

(bind-func color_set_r
  (lambda (c:Color* r:double)
      (tset! c 0 r)))

(bind-func color_set_g
  (lambda (c:Color* g:double)
      (tset! c 1 g)))

(bind-func color_set_b
  (lambda (c:Color* b:double)
      (tset! c 2 b)))

(bind-func color_set_a
  (lambda (c:Color* a:double)
      (tset! c 3 a)))

(bind-func color_get_r
  (lambda (c:Color*)
      (tref c 0)))

(bind-func color_get_g
  (lambda (c:Color*)
      (tref c 1)))

(bind-func color_get_b
  (lambda (c:Color*)
      (tref c 2)))

(bind-func color_get_a
  (lambda (c:Color*)
      (tref c 3)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-type SizeTransition <i1,double,double,double,i64,i64>);;finished,initial_size,current_size,target_size,start_time,transition_time

(bind-func size_transition_is_complete
  (lambda (st:SizeTransition*)
      (tref st 0)))

(bind-func size_get_target
  (lambda (st:SizeTransition*)
      (tref st 3)))

;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-type ColorTransition <i1,Color*,Color*,Color*,i64,i64>);;finished,initial_color,current_color,target_color,start_time,transition_time

(bind-func color_transition_is_complete
  (lambda (ct:ColorTransition*)
      (tref ct 0)))

(bind-func color_get_current
  (lambda (ct:ColorTransition*)
      (tref ct 2)))

(bind-func color_get_target
  (lambda (ct:ColorTransition*)
      (tref ct 3)))

;;;;;;;;;;;;;;;;;;;;;;;;;

;; Essential widget stuff
(bind-alias Time i8);;time manager
(bind-alias Code i8);;code graph

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-type Attractor <i64,i8*,Attractor*,i8*,i8*,i64,i64,i1,SizeTransition*,ColorTransition*>);;id,scene,parent,entity,physics_entity,type,segments,is_static,size_transition,color_transition

(bind-func attractor_get_scene
  (lambda (a:Attractor*)
      (tref a 1)))

(bind-func attractor_get_parent
  (lambda (a:Attractor*)
      (tref a 2)))

(bind-func attractor_get_entity
  (lambda (a:Attractor*)
    (tref a 3)))

(bind-func attractor_get_physics_entity
  (lambda (a:Attractor*)
    (tref a 4)))

(bind-func attractor_is_static
  (lambda (a:Attractor*)
    (tref a 7)))

(bind-func attractor_get_size
  (lambda (a:Attractor*)
    (tref a 8)))

(bind-func attractor_get_color
  (lambda (a:Attractor*)
    (tref a 9)))

(bind-func attractor_set_target_size
  (lambda (a:Attractor* s)
    (let ((size (attractor_get_size a)))
        (tset! size 0 0);;set finished false
        (tset! size 1 (tref size 2));;set initial size to current
        (tset! size 3 s);;set target size
        (tset! size 4 (now)));;set start time to now
    void))

(bind-func attractor_set_target_color
  (lambda (a:Attractor* r g b alpha)
    (let ((color (attractor_get_color a)))
        (let ((initial (tref color 1))
              (current (tref color 2))
              (target (tref color 3)))
            (color_set_color initial current)
            (color_set_rgba target r g b alpha)
            (tset! color 0 #f);;set finished false
            (tset! color 4 (now));;set start time to now
          ))
    void))

(bind-func attractor_create
  (lambda (id scene parent static x:double y:double size:double r g b a)
      (let ((entity (poly_scene_primitive_create_circle size size (i64toi32 CIRCLE_SEGMENTS))))
          (poly_entity_set_position entity x y)
          (poly_entity_set_color entity r g b a)
          (let ((physics_entity (poly_scene_physics_add_child scene entity static)))
                (let ((sizet (SizeTransition #t size size size (now) TRANSITION_TIME))
                      (colort (ColorTransition #t (Color r g b a) (Color r g b a) (Color r g b a) (now) TRANSITION_TIME)))
                    (Attractor id scene parent entity physics_entity CIRCLE_TYPE CIRCLE_SEGMENTS static sizet colort))))))

(bind-func attractor_update_size
  (lambda (a:Attractor*)
      (if (size_transition_is_complete (attractor_get_size a))
          (begin 
            void) 
          (begin 
            (let ((target (size_get_target (attractor_get_size a))))
                (poly_scene_primitive_set_circle_options (attractor_get_entity a) target target (i64toi32 CIRCLE_SEGMENTS))
                (poly_scene_physics_remove_child (attractor_get_scene a) (attractor_get_entity a))
                (poly_scene_physics_add_child (attractor_get_scene a) (attractor_get_entity a) (attractor_is_static a))
              )
            void)
          )))

(bind-func attractor_update_color
  (lambda (a:Attractor*)
      (if (color_transition_is_complete (attractor_get_color a)) 
            (begin 
              void)
            (begin 
              (let ((target (color_get_target (attractor_get_color a))))
                  (poly_entity_set_color (attractor_get_entity a) 
                            (color_get_r target) (color_get_g target) (color_get_b target) (color_get_a target))
                )
              void)
            )))

(bind-func attractor_update_attraction
  (lambda (a:Attractor*)
    (let ((parent (attractor_get_parent a)))
      (if (null? parent) 
          (begin 
            ;; (printf "parent was null\n")
            void)
          (begin
            (let ((px (poly_entity_get_x (attractor_get_entity parent)))
                  (py (poly_entity_get_y (attractor_get_entity parent)))
                  (mx (poly_entity_get_x (attractor_get_entity a)))
                  (my (poly_entity_get_y (attractor_get_entity a)))
                  (x 0.0)
                  (y 0.0))
                (let ((fx (- px mx))
                      (fy (- py my)))
                    (let ((flength (sqrt (+ (* fx fx) (* fy fy)))))
                      (let ((distance (maxd 1.0 (mind 5.0 flength)))
                            (fxn (/ fx flength))
                            (fyn (/ fy flength)))
                          (let ((strength (/ (* ATTRACTION_FACTOR 10.0) (* distance distance))))
                              ;; (printf "applied force\n")
                              (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* fxn strength) (* fyn strength)))))))
            void)))))

(bind-func attractor_update
  (lambda (a:Attractor*)
      (attractor_update_size a)
      (attractor_update_color a)
      (attractor_update_attraction a)
    void))

(bind-func attractor_destroy
  (lambda (a:Attractor*)
      (poly_scene_physics_remove_child (attractor_get_scene a) (attractor_get_entity a))
      (poly_scene_primitive_destroy (attractor_get_entity a))
      ;;destroy constructed tuple here
    ))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;custom entity list functionality

(bind-alias AttractorList List:<Attractor*,List*>)

(bind-func entity_list_clear:[AttractorList*,AttractorList*]*
  (lambda (al:AttractorList*)
    null))

(bind-func entity_list_add:[AttractorList*,AttractorList*,Attractor*]*
  (lambda (al:AttractorList* a:Attractor*)
      (cons a al)))

(bind-func entity_list_remove:[AttractorList*,AttractorList*,Attractor*]*
  (lambda (al:AttractorList* a:Attractor*)
      (cond ((= a (car al)) (cdr al))
            (else (cons (car al) (entity_list_remove (cdr al) a))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-type Widget <String*,Code*,Attractor*,AttractorList*>);; name, code, main entity, child entities

(bind-func widget_create
  (lambda (name:String* code:Code* x:double y:double size:double)
      (let ((attractor (attractor_create 0 POLY_SCENE null 1 x y size 1.0 0.0 0.0 1.0)))
          (Widget name code attractor null))))

(bind-func widget_get_name
  (lambda (w:Widget*)
      (tref w 0)))

(bind-func widget_get_code
  (lambda (w:Widget*)
      (tref w 1)))

(bind-func widget_get_attractor
  (lambda (w:Widget*)
      (tref w 2)))

(bind-func widget_get_children
  (lambda (w:Widget*)
      (tref w 3)))

(bind-func widget_add_child
  (lambda (w:Widget* a:Attractor*)
      (tset! w 3 (cons a (tref w 3)))
    void))

(bind-func widget_update
  (lambda (w:Widget*)
    (attractor_update (widget_get_attractor w))
    (map (lambda (a) (attractor_update a) 0) (widget_get_children w))
    void))

(bind-func widget_print
  (lambda (w:Widget*)
    (println (widget_get_name w))
    void))

(bind-func widget_destroy
  (lambda (w:Widget*)
      (attractor_destroy (widget_get_attractor w))
      (map (lambda (a) (attractor_destroy a) 0) (widget_get_children w))
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;custom widget list functionality

(bind-alias WidgetList List:<Widget*,List*>)

(bind-func widget_list_clear:[WidgetList*,WidgetList*]*
  (lambda (wl:WidgetList*)
    null))

(bind-func widget_list_add
  (lambda (wl:WidgetList* w:Widget*)
      (cons w wl)))

(bind-func widget_list_remove
  (lambda (wl:WidgetList* w:Widget*)
      (cond ((= w (car wl)) (cdr wl))
            (else (cons (car wl) (widget_list_remove (cdr wl) w))))))

(bind-func widget_list_print
  (lambda (wl:WidgetList*)
    (map (lambda (w) (widget_print w) 0) wl)
    ))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Custom callback 

(define cv-callback
  (lambda (time cb-sym . args)
      ;; (widget_update_active (widget_list_find (symbol->string cb-sym)) (real->integer time))
      (apply callback 
        (cons time (cons cb-sym args)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-val WIDGET_TEST Widget* 0)

(bind-func widget_test_init
  (lambda ()
      (set! WIDGET_TEST (widget_create (Str "test widget") null 0.0 0.0 50.0))))

(widget_test_init)

(bind-func widget_test_add_child
  (lambda ()
      (widget_add_child WIDGET_TEST
          (attractor_create 0 POLY_SCENE (widget_get_attractor WIDGET_TEST) 0 (random -200.0 200.0) (random -200.0 200.0) (random 20.0 40.0) (random) 1.0 (random 0.8) 1.0))
    ))

(widget_test_add_child)

;;;;;;;;;;;

(bind-func update
  (lambda ()
    (widget_update WIDGET_TEST)
    void))

;;;;;;;;;;;

(bind-func apply_random_forces
  (lambda ()
      (map (lambda (a) (attractor_set_target_color a (random 0.5 1.0) (random) 0.0 1.0) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (random -30000.0 30000.0) (random -30000.0 30000.0)) 0) (widget_get_children WIDGET_TEST))
    void))

(apply_random_forces)

;;;;;;;;;;

(bind-func apply_random_gravity
  (lambda ()
      (poly_scene_physics_set_gravity POLY_SCENE (random -30.0 30.0) (random -30.0 30.0))
    void))

(apply_random_gravity)

;;;;;;;;;;;;;;;;;
;; (bind-func test_destroy
;;   (lambda ()
;;       (widget_destroy WIDGET_TEST2)
;;     ))


