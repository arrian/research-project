;; Widget to handle the active and inactive state of specific code.

;; Utility ;;;;;;;;;;;;;;;;;



(bind-func get_x_for_index
  (lambda (index)
    (printf "%d\n" index)
    (- (* 150.0 (i64tod (/ index 5))) 500.0)))

(bind-func get_y_for_index
  (lambda (index)
    (- (* 150.0 (i64tod (% index 5))) 500.0)))

;; Widget ;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-type Widget <i64,Attractor*,AttractorList*,i1>);; id, main entity, child entities, should destroy

(bind-func widget_create
  (lambda (id:i64 x:double y:double size:double)
    (let ((attractor (attractor_create id POLY_SCENE null 1 x y size 1.0 0.0 0.0 1.0)))
        (printf "creating widget\n")
        (Widget_h id attractor null #f))))

(bind-func widget_get_id
  (lambda (w:Widget*)
    (tref w 0)))

(bind-func widget_get_attractor
  (lambda (w:Widget*)
    (tref w 1)))

(bind-func widget_get_children
  (lambda (w:Widget*)
    (tref w 2)))

;; Defines if this widget has been marked for destruction
(bind-func widget_should_destroy
  (lambda (w:Widget*)
    (tref w 3)))

(bind-func widget_should_not_destroy
  (lambda (w:Widget*)
    (not (widget_should_destroy w))))

(bind-func widget_set_destroy
  (lambda (w:Widget* destroy:i1)
    (tset! w 3 destroy)))

(bind-func widget_add_child
  (lambda (w:Widget* a:Attractor*)
    (tset! w 2 (cons a (tref w 2)))
    w))

(bind-func widget_set_children
  (lambda (w:Widget* c:AttractorList*)
    (tset! w 2 c)
    w))

(bind-func widget_find_children
  (lambda (w:Widget* id:i64)
      (filter (lambda (a) (equal id (attractor_get_id a))) (widget_get_children w))))

(bind-func widget_update_line
  (lambda (w:Widget* line:code_line*)
      (let ((found #f)
            (id (code_line_id_get line))
            (children (widget_get_children w)))
        (for-each (lambda (a) 
            (if (= id (attractor_get_id a)) 
              (begin
                (attractor_set_destroy a #f)
                (set! found #t)
                (attractor_update a)
                (let ((size (/ (i64tod (strlen (code_line_get_code line))) 1.0)))
                  (if (and (<> size (size_get_current (attractor_get_size a))) 
                           (size_transition_is_complete (attractor_get_size a))) 
                      (begin 
                        ;; (printf "target size: %f, current size: %f, setting size of %d with text %s\n" id (code_line_get_code line))
                        (attractor_set_target_size a size)
                        (attractor_set_target_color a 1.0 1.0 0.0 1.0))
                    ))
                (if (color_transition_is_complete (attractor_get_color a)) 
                      (begin 
                        (if (code_line_is_selected line) 
                          (attractor_set_target_color_duration a (random 0.6 1.0) (random 0.0 0.5) 0.0 1.0 (random 10000 50000))
                          (attractor_set_target_color_duration a (random 0.0 0.5) (random 0.7 1.0) (random) (random 0.6 1.0) (random 10000 50000)))))
                void)
              (begin 
                void)))
          children)
        (if (found)
          (begin 
            children)
          (begin
            (cons (attractor_create id POLY_SCENE (widget_get_attractor w) #f (random -500.0 -200.0) (random -400.0 400.0) 10.0 (random 0.5 1.0) (random) 0.0 (random 0.6 1.0)) children)
            )
          )
      )))

(bind-func widget_update
  (lambda (w:Widget* state:code_state*)
    (let ((i 0)
          (line_count (code_state_lines_count state)))

        ;; updating attractor position
        (let ((x (get_x_for_index (code_state_get_index state)))
              (y (get_y_for_index (code_state_get_index state))))
              (begin
                (if (or (<> x (attractor_get_x (widget_get_attractor w)))
                        (<> y (attractor_get_y (widget_get_attractor w)))) 
                  (attractor_set_position (widget_get_attractor w) x y))))

        (attractor_update (widget_get_attractor w))
        (for-each (lambda (a) (attractor_set_destroy a #t)) (widget_get_children w))
        (dotimes (i line_count)
            (let ((line (code_state_lines_get state i)))
                (widget_set_children w (widget_update_line w line))))
        (for-each attractor_destroy (filter attractor_should_destroy (widget_get_children w)));;destroy all children marked for deletion
        (widget_set_children w (filter (lambda (a) (not (attractor_should_destroy a))) (widget_get_children w)))
        void)))

(bind-func widget_print
  (lambda (w:Widget*)
    (printf "widget %d: %p\n" (widget_get_id w) w)
    void))

(bind-func widget_destroy:[Widget*,Widget*]*
  (lambda (w:Widget*)
      (attractor_destroy (widget_get_attractor w))
      (for-each attractor_destroy (widget_get_children w))
    null))

(bind-func widget_apply_inwards_force
  (lambda (w:Widget*)
      (let ((x (attractor_get_x (widget_get_attractor w)))
            (y (attractor_get_y (widget_get_attractor w)))
            (force 50.0))
          (for-each (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- x (attractor_get_x a))) (* force (- y (attractor_get_y a)))) 0) (widget_get_children w)))))

(bind-func widget_apply_circular_force
  (lambda (w:Widget*)
      (let ((x (attractor_get_x (widget_get_attractor w)))
            (y (attractor_get_y (widget_get_attractor w)))
            (force 50.0))
          (map (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- 0.0 (- y (attractor_get_y a)))) (* force (- x (attractor_get_x a)))) 0) (widget_get_children w))    
        )))

;; Widget List ;;;;;;;;;;;;;;;;;;;;;
(bind-alias WidgetList List:<Widget*,List*>)

(bind-func widget_list_clear:[WidgetList*,WidgetList*]*
  (lambda (wl:WidgetList*)
    (for-each widget_destroy wl)
    null))

(bind-func widget_list_remove
  (lambda (wl:WidgetList* w:Widget*)
      (widget_destroy w)
      (cond ((= w (car wl)) (cdr wl))
            (else (cons (car wl) (widget_list_remove (cdr wl) w))))))

(bind-func widget_list_print
  (lambda (wl:WidgetList*)
    (printf "list -----------\n")
    (for-each widget_print wl)
    (printf "length: %d\n" (length wl))
    (printf "---------------\n")))


(bind-func random_discrete
  (lambda ()
    (- (* 150.0 (i64tod (random 1 6))) 400.0)))

(bind-func widget_list_update_state
  (lambda (wl:WidgetList* state:code_state*)
      (let ((found #f)
            (id (code_state_id_get state)))
        (for-each (lambda (w) 
          (if (equal id (widget_get_id w))
            (begin

              (widget_set_destroy w #f)
              (set! found #t)
              (if (code_state_is_selected state) 
                (begin 
                  ;; (printf "id %d is selected\n" id)
                  (widget_apply_circular_force w)
                  (widget_apply_inwards_force w)
                  (if (color_transition_is_complete (attractor_get_color (widget_get_attractor w))) (attractor_set_target_color (widget_get_attractor w) 1.0 0.5 0.0 1.0))
                  )
                (if (color_transition_is_complete (attractor_get_color (widget_get_attractor w))) 
                  (if (code_state_is_active state) 
                    (attractor_set_target_color_duration (widget_get_attractor w) (random 0.0 0.7) (random 0.8 1.0) (random 0.0 0.5) 1.0 150000)
                    (attractor_set_target_color (widget_get_attractor w) 0.4 0.4 0.4 0.4))))
              (widget_update w state)
              void)
            (begin void)
            )
          ) wl)
        (let ((x (get_x_for_index (code_state_get_index state)))
              (y (get_y_for_index (code_state_get_index state))))
            (if (found)
              wl
              (cons (widget_create id x y 60.0) wl))))))

(bind-func widget_list_update
  (lambda (wl:WidgetList*)
      (let ((i 0)
            (nw:WidgetList* wl)
            (state_count (code_manager_states_count CODE_MANAGER)))
          (widget_list_print wl)
          (for-each (lambda (w) (widget_set_destroy w #t)) nw)
          (dotimes (i state_count)
              (let ((state (code_manager_states_get CODE_MANAGER i)))
                  (set! nw (widget_list_update_state nw state))))
          (for-each widget_destroy (filter widget_should_destroy nw))
          (filter widget_should_not_destroy nw))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Custom callback 

(define cv-callback
  (lambda (time cb-sym . args)
      ;; (widget_update_active (widget_list_find (symbol->string cb-sym)) (real->integer time))
      (apply callback 
        (cons time (cons cb-sym args)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-val WIDGET_LIST_TEST WidgetList* 0)


(bind-func widget_list_test_init
  (lambda ()
    (let ((n:List:<Widget*,List*>* null))
      (set! WIDGET_LIST_TEST n))))

(widget_list_test_init)


(bind-func update
  (lambda ()
    (memzone 1000000
      (set! WIDGET_LIST_TEST (widget_list_update WIDGET_LIST_TEST)))
      void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (bind-func update
  
;;   (lambda ()
;;     ;; (memzone 10000000 0
;;       (let ((i 0))
;;         (dotimes (i 10000)
;;           (lambda () 0))
;;         void)
;;       ;; )
;;     ))

;; (update)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (bind-val WIDGET_TEST Widget* 0)

;; (bind-func widget_test_init
;;   (lambda ()
;;       (set! WIDGET_TEST (widget_create 0 0.0 0.0 100.0))))

;; (widget_test_init)

;; (bind-func widget_test_add_child
;;   (lambda ()
;;       (widget_add_child WIDGET_TEST
;;           (attractor_create 0 POLY_SCENE (widget_get_attractor WIDGET_TEST) 0 (random -200.0 200.0) (random -200.0 200.0) (random 20.0 40.0) (random 0.9 1.0) (random 0.0 0.5) (random 0.0 0.2) 1.0))
;;     ))

;; (widget_test_add_child)

;;;;;;;;;;;

;; (bind-func update
;;   (lambda ()
;;     (if (not (= WIDGET_TEST null)) (widget_update WIDGET_TEST))
;;     (if (= (% (now) 5) 0) 
;;       (begin
;;         ;; (apply_random_color)
;;         ;; (apply_random_forces)
;;         ;; (apply_random_size)
;;         void))
;;     void))

;;;;;;;;;;;

;; (bind-func apply_random_forces
;;   (lambda ()
;;       (map (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (random -30000.0 30000.0) (random -30000.0 30000.0)) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_random_forces)

;; ;;;;;;;;;;;;;;;;

;; (bind-func apply_random_color
;;   (lambda ()
;;       (map (lambda (a) (attractor_set_target_color a (random 0.5 1.0) (random) 0.0 (random 0.6 1.0)) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_random_color)

;; (bind-func apply_random_color
;;   (lambda ()
;;       (for-each (lambda (w) (for-each (lambda (a) (attractor_set_target_color a (random 0.5 1.0) (random) 0.0 (random 0.6 1.0)) 0) (widget_get_children w))) WIDGET_LIST_TEST)
;;       (for-each (lambda (w) (for-each (lambda (a) (attractor_set_target_size a (random 10.0 40.0)) 0) (widget_get_children w))) WIDGET_LIST_TEST)
;;     void))

;; (apply_random_color)

;; (bind-func apply_evaluate_color
;;   (lambda ()
;;       (map (lambda (a) (attractor_set_target_color a (random 0.3 0.8) (random 0.8 1.0) (random 0.0 0.5) 1.0) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_evaluate_color)

;; (bind-func apply_error_color
;;   (lambda ()
;;       (map (lambda (a) (attractor_set_target_color a (random 0.8 1.0) (random 0.2 0.5) (random 0.1 0.2) 1.0) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_error_color)

;; (bind-func apply_edit_color
;;   (lambda ()
;;     (map (lambda (a) 
;;       (let ((grey (random 0.4 1.0)))
;;         (attractor_set_target_color a grey grey grey (random 0.7 1.0))) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_edit_color)

;; ;;;;;;;;;;

;; (bind-func apply_random_gravity
;;   (lambda ()
;;       (poly_scene_physics_set_gravity POLY_SCENE (random -30.0 30.0) (random -30.0 30.0))
;;     void))

;; ;; (apply_random_gravity)

;; (bind-func apply_zero_gravity
;;   (lambda ()
;;     (poly_scene_physics_set_gravity POLY_SCENE 0.0 0.0)))

;; ;; (apply_zero_gravity)

;; ;;;;;;;;;;;;;;

;; (bind-func apply_random_size
;;   (lambda ();;attractor_set_target_size
;;       (attractor_set_target_size (nth (widget_get_children WIDGET_TEST) (random 0 (- (length (widget_get_children WIDGET_TEST)) 1)))
;;                                  (random 20.0 30.0))))

;; ;; (apply_random_size)

;; (bind-func apply_size
;;   (lambda (size:double);;attractor_set_target_size
;;       (map (lambda (a) (attractor_set_target_size a size) 0) (widget_get_children WIDGET_TEST))))

;; ;; (apply_size 10.0)
;; ;; (apply_size 40.0)



;; ;;;;;;;;;;;;

;; (bind-func apply_outwards_force
;;   (lambda ()
;;       (let ((x (attractor_get_x (widget_get_attractor WIDGET_TEST)))
;;             (y (attractor_get_y (widget_get_attractor WIDGET_TEST)))
;;             (force 50.0))
;;           (map (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- 0.0 (- x (attractor_get_x a)))) (* force (- 0.0 (- y (attractor_get_y a))))) 0) (widget_get_children WIDGET_TEST))    
;;         )))

;; ;; (apply_outwards_force)

;; ;;;;;;;;;;;;;;;;;;;;;;;
;; (bind-func apply_inwards_force
  ;; (lambda ()
  ;;     (let ((x (attractor_get_x (widget_get_attractor WIDGET_TEST)))
  ;;           (y (attractor_get_y (widget_get_attractor WIDGET_TEST)))
  ;;           (force 50.0))
  ;;         (map (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- x (attractor_get_x a))) (* force (- y (attractor_get_y a)))) 0) (widget_get_children WIDGET_TEST))    
  ;;       )))

;; ;; (apply_inwards_force)

;; (bind-func widget_apply_inwards_force
;;   (lambda (w:Widget*)
;;       (let ((x (attractor_get_x (widget_get_attractor w)))
;;             (y (attractor_get_y (widget_get_attractor w)))
;;             (force 50.0))
;;           (for-each (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- x (attractor_get_x a))) (* force (- y (attractor_get_y a)))) 0) (widget_get_children w)))))

;; (apply_inwards_force)

;; ;;;;;;;;;;;;;;;;;;;;;;;

;; (bind-func apply_circular_force
;;   (lambda ()
;;       (let ((x (attractor_get_x (widget_get_attractor WIDGET_TEST)))
;;             (y (attractor_get_y (widget_get_attractor WIDGET_TEST)))
;;             (force 50.0))
;;           (map (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- 0.0 (- y (attractor_get_y a)))) (* force (- x (attractor_get_x a)))) 0) (widget_get_children WIDGET_TEST))    
;;         )))

;; ;; (apply_circular_force)

;; ;;;;;;;;;;;;;;


;; (bind-func recreate
;;   (lambda ()
;;     (widget_destroy WIDGET_TEST)
;;     (widget_test_init)
;;     void))

;; ;; (recreate)




