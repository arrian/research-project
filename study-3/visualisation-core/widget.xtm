;; Widget to handle the active and inactive state of specific code.

(bind-type Widget <i64,Attractor*,AttractorList*,i1>);; id, main entity, child entities, should destroy

(bind-func widget_create
  (lambda (id:i64 x:double y:double size:double)
    (let ((attractor (attractor_create 0 POLY_SCENE null 1 x y size 1.0 0.0 0.0 1.0)))
        (printf "creating widget\n")
        (Widget id attractor null #f))))

(bind-func widget_get_id
  (lambda (w:Widget*)
    (tref w 0)))

(bind-func widget_get_attractor
  (lambda (w:Widget*)
    (tref w 1)))

(bind-func widget_get_children
  (lambda (w:Widget*)
    (tref w 2)))

(bind-func widget_set_destroy
  (lambda (w:Widget* destroy:i1)
    (tset! w 3 destroy)))

(bind-func widget_add_child
  (lambda (w:Widget* a:Attractor*)
    (tset! w 2 (cons a (tref w 2)))
    w))

(bind-func widget_set_children
  (lambda (w:Widget* c:AttractorList*)
    (tset! w 2 c)
    w))

(bind-func widget_find_children
  (lambda (w:Widget* id:i64)
      (filter (lambda (a) (equal id (attractor_get_id a))) (widget_get_children w))))


(bind-func widget_update
  (lambda (w:Widget* state:code_state*)
    (let ((i 0)
          (children (widget_get_children w)))
        (attractor_update (widget_get_attractor w))
        (map (lambda (a) (attractor_set_destroy a #t)) children)
        (dotimes (i (code_state_lines_count state))
            (let ((line (code_state_lines_get state i))
                  (id (code_line_id_get line))
                  (found (widget_find_children w id)))
                (if (null? found)
                  (begin
                    (set! children (cons (attractor_create id POLY_SCENE (widget_get_attractor w) #f (random -300.0 300.0) (random -300.0 300.0) 40.0 0.0 1.0 0.0 1.0) children))
                    void)
                  (begin
                    (map (lambda (a) 
                      (begin
                        (attractor_set_destroy a #f)
                        (attractor_update a)))
                      found) 
                    void))))
        (widget_set_children w children)
        w)))

(bind-func widget_print
  (lambda (w:Widget*)
    (println (widget_get_id w))
    w))

(bind-func widget_destroy
  (lambda (w:Widget*)
      (attractor_destroy (widget_get_attractor w))
      (map attractor_destroy (widget_get_children w))
    w))

;; Widget List ;;;;;;;;;;;;;;;;;;;;;

(bind-alias WidgetList List:<Widget*,List*>)

(bind-func widget_list_clear:[WidgetList*,WidgetList*]*
  (lambda (wl:WidgetList*)
    (map widget_destroy wl)
    null))

(bind-func widget_list_add
  (lambda (wl:WidgetList* w:Widget*)
      (cons w wl)))

(bind-func widget_list_remove
  (lambda (wl:WidgetList* w:Widget*)
      (widget_destroy w)
      (cond ((= w (car wl)) (cdr wl))
            (else (cons (car wl) (widget_list_remove (cdr wl) w))))))

(bind-func widget_list_print
  (lambda (wl:WidgetList*)
    (map widget_print wl)))

(bind-func widget_list_find
  (lambda (wl:WidgetList* id:i64)
      (filter (lambda (w) (equal id (widget_get_id w))) wl)))

(bind-func widget_list_update
  (lambda (wl:WidgetList*)
      (let ((i 0)
            (rwl wl))
          (map (lambda (w) (widget_set_destroy w #t)) wl)
          (dotimes (i (code_manager_states_count CODE_MANAGER))
              (let ((state (code_manager_states_get CODE_MANAGER i))
                    (id (code_state_id_get state))
                    (found (widget_list_find wl id)))
                  (if (null? found) 
                    (begin (set! rwl (cons (widget_create id (random 0.0 300.0) (random 0.0 300.0) 100.0) rwl)) void)
                    (begin (map (lambda (w) 
                                  (begin
                                    (widget_update w state)
                                    (widget_set_destroy w #f)
                                    )) 
                                  found) void))))
          rwl)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Custom callback 

(define cv-callback
  (lambda (time cb-sym . args)
      ;; (widget_update_active (widget_list_find (symbol->string cb-sym)) (real->integer time))
      (apply callback 
        (cons time (cons cb-sym args)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-val WIDGET_LIST_TEST WidgetList* 0)


(bind-func widget_list_test_init
  (lambda ()
    (let ((n:List:<Widget*,List*>* null))
      (set! WIDGET_LIST_TEST n))))

(widget_list_test_init)


(bind-func update
  (lambda ()
      (set! WIDGET_LIST_TEST (widget_list_update WIDGET_LIST_TEST))
      void))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (bind-val WIDGET_TEST Widget* 0)

;; (bind-func widget_test_init
;;   (lambda ()
;;       (set! WIDGET_TEST (widget_create 0 0.0 0.0 100.0))))

;; (widget_test_init)

;; (bind-func widget_test_add_child
;;   (lambda ()
;;       (widget_add_child WIDGET_TEST
;;           (attractor_create 0 POLY_SCENE (widget_get_attractor WIDGET_TEST) 0 (random -200.0 200.0) (random -200.0 200.0) (random 20.0 40.0) (random 0.9 1.0) (random 0.0 0.5) (random 0.0 0.2) 1.0))
;;     ))

;; (widget_test_add_child)

;;;;;;;;;;;

;; (bind-func update
;;   (lambda ()
;;     (if (not (= WIDGET_TEST null)) (widget_update WIDGET_TEST))
;;     (if (= (% (now) 5) 0) 
;;       (begin
;;         ;; (apply_random_color)
;;         ;; (apply_random_forces)
;;         ;; (apply_random_size)
;;         void))
;;     void))

;;;;;;;;;;;

;; (bind-func apply_random_forces
;;   (lambda ()
;;       (map (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (random -30000.0 30000.0) (random -30000.0 30000.0)) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_random_forces)

;; ;;;;;;;;;;;;;;;;

;; (bind-func apply_random_color
;;   (lambda ()
;;       (map (lambda (a) (attractor_set_target_color a (random 0.5 1.0) (random) 0.0 (random 0.6 1.0)) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_random_color)

;; (bind-func apply_evaluate_color
;;   (lambda ()
;;       (map (lambda (a) (attractor_set_target_color a (random 0.3 0.8) (random 0.8 1.0) (random 0.0 0.5) 1.0) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_evaluate_color)

;; (bind-func apply_error_color
;;   (lambda ()
;;       (map (lambda (a) (attractor_set_target_color a (random 0.8 1.0) (random 0.2 0.5) (random 0.1 0.2) 1.0) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_error_color)

;; (bind-func apply_edit_color
;;   (lambda ()
;;     (map (lambda (a) 
;;       (let ((grey (random 0.4 1.0)))
;;         (attractor_set_target_color a grey grey grey (random 0.7 1.0))) 0) (widget_get_children WIDGET_TEST))
;;     void))

;; ;; (apply_edit_color)

;; ;;;;;;;;;;

;; (bind-func apply_random_gravity
;;   (lambda ()
;;       (poly_scene_physics_set_gravity POLY_SCENE (random -30.0 30.0) (random -30.0 30.0))
;;     void))

;; ;; (apply_random_gravity)

;; (bind-func apply_zero_gravity
;;   (lambda ()
;;     (poly_scene_physics_set_gravity POLY_SCENE 0.0 0.0)))

;; ;; (apply_zero_gravity)

;; ;;;;;;;;;;;;;;

;; (bind-func apply_random_size
;;   (lambda ();;attractor_set_target_size
;;       (attractor_set_target_size (nth (widget_get_children WIDGET_TEST) (random 0 (- (length (widget_get_children WIDGET_TEST)) 1)))
;;                                  (random 20.0 30.0))))

;; ;; (apply_random_size)

;; (bind-func apply_size
;;   (lambda (size:double);;attractor_set_target_size
;;       (map (lambda (a) (attractor_set_target_size a size) 0) (widget_get_children WIDGET_TEST))))

;; ;; (apply_size 10.0)
;; ;; (apply_size 40.0)



;; ;;;;;;;;;;;;

;; (bind-func apply_outwards_force
;;   (lambda ()
;;       (let ((x (attractor_get_x (widget_get_attractor WIDGET_TEST)))
;;             (y (attractor_get_y (widget_get_attractor WIDGET_TEST)))
;;             (force 50.0))
;;           (map (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- 0.0 (- x (attractor_get_x a)))) (* force (- 0.0 (- y (attractor_get_y a))))) 0) (widget_get_children WIDGET_TEST))    
;;         )))

;; ;; (apply_outwards_force)

;; ;;;;;;;;;;;;;;;;;;;;;;;
;; (bind-func apply_inwards_force
;;   (lambda ()
;;       (let ((x (attractor_get_x (widget_get_attractor WIDGET_TEST)))
;;             (y (attractor_get_y (widget_get_attractor WIDGET_TEST)))
;;             (force 50.0))
;;           (map (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- x (attractor_get_x a))) (* force (- y (attractor_get_y a)))) 0) (widget_get_children WIDGET_TEST))    
;;         )))

;; ;; (apply_inwards_force)

;; ;;;;;;;;;;;;;;;;;;;;;;;

;; (bind-func apply_circular_force
;;   (lambda ()
;;       (let ((x (attractor_get_x (widget_get_attractor WIDGET_TEST)))
;;             (y (attractor_get_y (widget_get_attractor WIDGET_TEST)))
;;             (force 50.0))
;;           (map (lambda (a) (poly_physics_entity_apply_force (attractor_get_physics_entity a) (* force (- 0.0 (- y (attractor_get_y a)))) (* force (- x (attractor_get_x a)))) 0) (widget_get_children WIDGET_TEST))    
;;         )))

;; ;; (apply_circular_force)

;; ;;;;;;;;;;;;;;


;; (bind-func recreate
;;   (lambda ()
;;     (widget_destroy WIDGET_TEST)
;;     (widget_test_init)
;;     void))

;; ;; (recreate)




