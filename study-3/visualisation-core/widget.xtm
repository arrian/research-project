;; Widget that handles the active and inactive state of specific code.

;; 0 name
;; 1 code
;; 2 code graph pointer
;; 3 next callback time (now-based)
;; 4 initial callback time (now-based)
(bind-type Widget <String*,String*,i8*,i64,i64>)

(bind-func widget_get_name
  (lambda (cbw:Widget*)
    (tref cbw 0)))

(bind-func widget_set_name
  (lambda (cbw:Widget* name:String*)
    (tset! cbw 0 name)))

(bind-func widget_get_code
  (lambda (cbw:Widget*)
    (tref cbw 1)))

(bind-func widget_set_code
  (lambda (cbw:Widget* code:String*)
    (tset! cbw 1 code)))

(bind-func widget_get_graph
  (lambda (cbw:Widget*)
    (tref cbw 2)))

(bind-func widget_set_graph
  (lambda (cbw:Widget* graph:i8*)
    (tset! cbw 2 graph)))

(bind-func widget_get_next_time
  (lambda (cbw:Widget*)
    (tref cbw 3)))

(bind-func widget_set_next_time
  (lambda (cbw:Widget* time:i64)
    (tset! cbw 3 time)))

(bind-func widget_get_initial_time
  (lambda (cbw:Widget*)
    (tref cbw 4)))

(bind-func widget_set_intial_time
  (lambda (cbw:Widget* time:i64)
    (tset! cbw 4 time)))

;; Update the widget for the inactive state (eg. code editing, coder cursor selection, errors during compilation)
(bind-func widget_update_inactive
  (lambda (w:Widget*)
    (println "name:" (widget_get_name w) "code:" (widget_get_code w))
    0))

;; Update the widget for the active state (eg. callback times, instrument played)
;; (bind-func widget_update_active
;;   (lambda (w:Widget* phase:double)
;;     ))

(bind-func widget_print
  (lambda (w:Widget*)
    (println "name:" (widget_get_name w) "code:" (widget_get_code w))
    void))

;;;;;;;;;;;;;;;;;;;

(bind-val WIDGET_LIST List:<Widget*,List*>*)

(bind-func widget_list_init
  (lambda ()
    (let ((n:List:<Widget*,List*>* null))
      (set! WIDGET_LIST n))))

(widget_list_init)

(bind-func widget_list_add
  (lambda (name:i8* code:i8* time_next time_initial)
    (set! WIDGET_LIST (cons (Widget (Str name) (Str code) null time_next time_initial)
                        WIDGET_LIST))))

(bind-func widget_list_remove
  (lambda (name)
    (set! WIDGET_LIST (filter (lambda (w)
                            (not (equal name (widget_get_name w))))
                          WIDGET_LIST))))

;; (bind-func widget_list_find
;;   (lambda ()
;;     ))

(bind-func widget_list_update_inactive
  (lambda (code:i8*)
    (map (lambda (w) (widget_update_inactive w)) WIDGET_LIST)
    void))

(widget_list_update_inactive "(bind-val WIDGET_LIST List:<Widget*,List*>*)" 1.0)


;;Needs beat, duration and widget index (TODO: should default to -1)
(define cv-callback
  (lambda (time cb-sym . args)
      ;; (widget_update_active (widget_list_find (symbol->string cb-sym)) (real->integer time))
      (apply callback 
        (cons time (cons cb-sym args)))))


;; Testing

(widget_list_add (random (list "test1" "test2" "test3" "test4" "test5" "test6" "test7")) (random (list "(test1)" "(test2)" "(test3)" "(test4)" "(test5)" "(test6)" "(test7)")) (random 100 200) (random 0 100))



