;; (bind-type Connector <poly_scene_line*,Attractor*,Attractor*>);;source, target

;; (bind-func connector_get_line
;;   (lambda (c:Connector*)
;;     (tref c 0)))

;; (bind-func connector_create
;;   (lambda (x1 y1 x2 y2)
;;     (let ((connector (Connector (poly_scene_line_create x1 y1 x2 y2) null null)))
;;       (poly_entity_set_color (connector_get_line connector) 1.0 1.0 1.0 1.0)
;;       (poly_scene_add_child POLY_SCENE (connector_get_line connector))
;;       connector)))

;; (bind-func connector_destroy
;;   (lambda (connector:Connector*)
;;     (poly_scene_line_destroy (tref connector 0))))

;; (bind-func connector_set_points
;;   (lambda (connector:Connector* x1 y1 x2 y2)
;;   	(poly_scene_line_set_points (connector_get_line connector) x1 y1 x2 y2)
;;     void))



(bind-val PROGRAMMER_IMAGE_X double 800.0)
(bind-val PROGRAMMER_IMAGE_Y_OFFSET double 100.0);;offset the image vertically so it doesn't perfectly align with the hexagon rows

(bind-func set_programmer_x
  (lambda (x:double)
    (set! PROGRAMMER_IMAGE_X x)
    void))

(set_programmer_x 1000.0)

(bind-func set_programmer_y_offset
  (lambda (y:double)
    (set! PROGRAMMER_IMAGE_Y_OFFSET y)
    void))

(set_programmer_y_offset 0.0)

(bind-val PROGRAMMER_IMAGE poly_scene_image* 0)

(bind-func programmer_get_x
  (lambda ()
      (poly_entity_get_x PROGRAMMER_IMAGE)))

(bind-func programmer_get_y
  (lambda ()
      (poly_entity_get_y PROGRAMMER_IMAGE)))

(bind-val CONNECTOR_HEXAGON poly_scene_line* 0)

(bind-val CONNECTOR_CODE poly_scene_line* 0)

(bind-val CONNECTOR_CIRCLE_RADIUS double 100.0)
;; (bind-val CONNECTOR_CIRCLE poly_scene_primitive* 0)

(bind-func connector_init
  (lambda ()
    (set! PROGRAMMER_IMAGE (poly_scene_image_create (string_cstr (string_cat_h PATH (Str_h "/resources/man.png")))))
    (poly_scene_add_child POLY_SCENE PROGRAMMER_IMAGE)
    (set! CONNECTOR_HEXAGON null)
    (set! CONNECTOR_CODE null)
    ;; (set! CONNECTOR_CIRCLE null)
    void))

(connector_init)

(bind-func connector_update
  (lambda (hex_x:double hex_y:double code_x:double code_y:double programmer_y:double)
    (poly_entity_set_position PROGRAMMER_IMAGE PROGRAMMER_IMAGE_X (+ PROGRAMMER_IMAGE_Y_OFFSET programmer_y))
    (if (null? CONNECTOR_HEXAGON) 
      (begin
        (set! CONNECTOR_HEXAGON (poly_scene_line_create (programmer_get_x) (programmer_get_y) (+ hex_x (/ CONNECTOR_CIRCLE_RADIUS 2.0)) hex_y))
        (poly_scene_add_child POLY_SCENE CONNECTOR_HEXAGON)
        void)
      (poly_scene_line_set_points CONNECTOR_HEXAGON (programmer_get_x) (programmer_get_y) (+ hex_x (/ CONNECTOR_CIRCLE_RADIUS 2.0)) hex_y))
    (if (null? CONNECTOR_CODE) 
      (begin 
        (set! CONNECTOR_CODE (poly_scene_line_create (- hex_x (/ CONNECTOR_CIRCLE_RADIUS 2.0)) hex_y code_x code_y)) 
        (poly_scene_add_child POLY_SCENE CONNECTOR_CODE)
        void)
      (poly_scene_line_set_points CONNECTOR_CODE (- hex_x (/ CONNECTOR_CIRCLE_RADIUS 2.0)) hex_y code_x code_y))
    ;; (if (null? CONNECTOR_CIRCLE) 
    ;;   (begin 
    ;;     (set! CONNECTOR_CIRCLE (poly_scene_primitive_create_line_circle CONNECTOR_CIRCLE_RADIUS CONNECTOR_CIRCLE_RADIUS 16)) 
    ;;     (poly_scene_add_child POLY_SCENE CONNECTOR_CIRCLE)
    ;;     void))
    ;; (poly_entity_set_position CONNECTOR_CIRCLE hex_x hex_y)

    (poly_entity_set_color CONNECTOR_HEXAGON 1.0 1.0 1.0 1.0)
    (poly_entity_set_color CONNECTOR_CODE 1.0 1.0 1.0 1.0)
    ;; (poly_entity_set_color CONNECTOR_CIRCLE 1.0 1.0 1.0 0.0)
    
    void))

(bind-func connector_hide
  (lambda ()
      (if (null? CONNECTOR_HEXAGON) void (poly_scene_line_destroy CONNECTOR_HEXAGON))
      (if (null? CONNECTOR_CODE) void (poly_scene_line_destroy CONNECTOR_CODE))
      ;; (if (null? CONNECTOR_CIRCLE) void (poly_scene_primitive_destroy CONNECTOR_CIRCLE))
      (set! CONNECTOR_HEXAGON null)
      (set! CONNECTOR_CODE null)
      ;; (set! CONNECTOR_CIRCLE null)
      ))

(connector_hide)
