
(bind-val EVENT_SELECTION i64 0)
(bind-val EVENT_CODE i64 0)
(bind-val EVENT_KEYBOARD i64 0)
(bind-val EVENT_ERROR i64 0)

;; time,address,data
(bind-type Event <i64,i64,i8*>)

;;;;;;;;;;;;;;;

(bind-func event_get_time
  (lambda (eq:Event*)
    (tref eq 0)))

(bind-func event_get_address
  (lambda (eq:Event*)
    (tref eq 1)))

(bind-func event_get_data
  (lambda (eq:Event*)
    (tref eq 2)))

(bind-func event_set_time
  (lambda (eq:Event* time:i64)
    (tset! eq 0 time)))

(bind-func event_set_address
  (lambda (eq:Event* address:i64)
    (tset! eq 1 address)))

(bind-func event_set_data
  (lambda (eq:Event* data:i8*)
    (tset! eq 2 data)))

;;;;;;;;;;;;;;;;

(bind-val EVENT_QUEUE List:<Event*,List*>*)

(bind-func eventqueue_init
  (lambda ()
    (let ((n:List:<Event*,List*>* null))
      (set! EVENT_QUEUE n))))

(eventqueue_init)

;;;;;;;;;;;;;;;;

(bind-func last_element
  (lambda (l:List:<Event*,List*>*)
      (cond ((null? (cdr l)) (car l))
        (else (last_element (cdr l))))))

(bind-func remove_last_element
  (lambda (l:List:<Event*,List*>*)
    (if (null? (cdr l))
        null
        (cons (car l) (remove_last_element (cdr l))))))

(bind-func eventqueue_alloc_data
  (lambda (type:i8* data:i8*)
    (let ((bytes:i32 0)
          (i 1))
      (dotimes (i (- (strlen type) 1))
        (let ((t:i8 (pref type i)))
            (cond ((= t 's'))
                  (else 0))
          )

        )

      (let ((copy:i8* (halloc )))
        (memcpy)
        ))
    ))

;;;;;;;;;;;;;;;;

;; Pushes a new event to the queue. This will also allocate 
(bind-func eventqueue_push
  (lambda (time:i64 address:i8* data:i8*)
    (set! EVENT_QUEUE (cons (Event time address data)
                        EVENT_QUEUE))))

(bind-func eventqueue_pop
  (lambda ()
    (let ((popped (last_element EVENT_QUEUE)))
      (set! EVENT_QUEUE (remove_last_element EVENT_QUEUE))
      popped)))

(bind-func eventqueue_size
  (lambda ()
    (length EVENT_QUEUE)))

;; (eventqueue_push 100 "test" "test")
;; (eventqueue_size)
;; (event_get_time (eventqueue_pop))
;; (eventqueue_size)

