(sys:load "research-project/setup.xtm")
;; (sys:load "research-project/app.xtm")
;; (sys:load "research-project/code.xtm")

;; (define func-name
;; 	(let ((x 2))
;; 	(lambda (test)
;; 		x
;; 		42
;; 		)))

;; (get-closure-code func-name)
;; (get-eldoc-string func-name)


;;Examples

;; (bind-func test_codetree
;; 	(lambda ()
;; 		(let ((code (codetree_create "research-project/test.xtm")))
;; 			(printf "%s\n" (codetree_get_code (codetree_find code "define")))
;; 			(codetree_destroy code)
;; 			void)))

;; (test_codetree)

;; (bind-func test_codegraph
;; 	(lambda ()
;; 		(let ((code (codetree_create "research-project/test.xtm"))
;; 				(graph (codegraph_create code)))
;; 			(print (codegraph_get_size graph))
;; 			(codegraph_print graph)

;; 			(codegraph_destroy graph)
;; 			(codetree_destroy code)
;; 			void)))

;; (test_codegraph)



;;;;;;;;;Code Helper;;;;
(bind-val code i8* 0)

(bind-func init_code
	(lambda ()
		(set! code null)))
(init_code)

(bind-func load_code
	(lambda (path:i8*)
		(cond ((null? code) 
						;;(printf "%s\n" "is null") 
						void)
					(else 
						;;(printf "%s\n" "is not null")
						(codetree_destroy code)
						(set! code null)
						void))
		(set! code (codetree_create path))
		;;(codetree_print_top_level code)
		;;(printf "%p\n" code)
		code
		))

(load_code "research-project/vis.cache")

;;;;;;;;;;;;Graph Helper;;;;;;;;;

(bind-val GRAPH i8* 0)

(bind-func init_graph
  (lambda ()
  		(set! GRAPH (codegraph_create code))
    ))

(init_graph)

;;;;;;;;;;;;;;;;;;;;;;;


(define width 1024.0)
(define height 768.0)
(bind-val width float 1024.0)
(bind-val height float 768.0)
(bind-val half_width float (/ width 2.0))
(bind-val half_height float (/ height 2.0))


(bind-func draw_graph
	(lambda (graph parent depth)
		(let ((i 0)
				(x (codegraph_get_x graph))
				(y (codegraph_get_y graph))
				(children (codegraph_get_child_count graph))
				(size (+ 20.0 (if (> (vu_level 1) 0.000000005) (+ 1.0 (* 10000.0 (vu_level 1))) 0.0)));;(+ 10.0 (* (i32tof children) 5.0)))
				(type (codegraph_get_type graph))
				(circle2 (polycode_add_circle poly x y (+ 4.1 size) (+ 4.1 size) 5 0.0 0.0 0.0))
				(circle (polycode_add_circle poly x y size size 5 0.3 (/ 1.0 (/ (i32tof depth) 2.0)) 0.3)) ;;(sin (/ (i64tof (now)) 10000.0))
				)

			(if (not (null? parent)) (polycode_set_color (polycode_add_line poly circle parent 10.0) 0.3 (/ 0.7 (/ (i32tof depth) 3.5)) 0.3))

			;;(printf "%d\n" (vu_level 1))
			;; (printf "%d\n" (strlen (codegraph_get_code graph)))
			(dotimes (i children)
				;;(printf "%d" i)
				(let ((child (codegraph_get_child graph i))
						(xc (ftod (+ half_width (codegraph_get_x child))))
						(yc (ftod (+ half_height (codegraph_get_y child)))))

						(if (> (codegraph_get_child_count child) 1) (draw_graph child circle (+ 1 depth)))

					))

			;;(if (= type 1) (polycode_add_code poly 0.0 0.0 (codegraph_get_code graph) 30))

			;;(printf "%d\n" type)
			;;(printf "%d\n" type)
			;; (cond ((= type 5) ;;function
			;; 			;; (cairo_set_source_rgba cr 0.0 0.0 1.0 1.0)
			;; 		)
			;; 		((= type 1) ;;root
			;; 			;; (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
			;; 		)
			;; 		((= type 4)
					
			;; 			;; (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
			;; 			;; (cairo_set_font_size cr 10.0)
			;; 			;; (cairo_move_to cr x y)
			;; 			;;(cairo_show_text cr (codetree_get_code (codegraph_get_code graph)))
			;; 			;; (cairo_set_source_rgba cr 1.0 1.0 0.0 1.0)
			;; 		)
			;; 			(else 
			;; 		;; (cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
			;; 				)
			;; 			)

			

			;;(cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
			;; (cairo_arc cr x y (* 2.0 size) 0.0 TWOPI)
			;; (cairo_fill cr)
			;; (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
			;; (cairo_arc cr x y (* 2.0 size) 0.0 TWOPI)
			;; (cairo_stroke cr)  		
		
			void
		)))

;; (bind-func test_draw_graph
;;   (lambda ()
;;   		(draw_graph graph)
;;     ))

;; (test_draw_graph)

(bind-func draw
	(lambda (t:double)
		
		(polycode_clear_scene poly)
		(codegraph_update GRAPH code)
		(codegraph_step GRAPH 1.0)
		(draw_graph GRAPH null 1)
		;;(test_add_circle)
		(app_step)
		void))

;; (draw 1/40)

(define draw-loop
	(lambda (beat dur)
		(draw 1/40)
		(callback (*metro* (+ beat (* .5 dur)))
							'draw-loop
							(+ beat dur) 
							dur)))

(draw-loop (*metro* 'get-beat 4) 1/60)


(define load-code-loop
	(lambda (beat dur)
		(load_code "research-project/vis.cache")
		;; (print "loadedcode")
		(callback (*metro* (+ beat (* .5 dur)))
							'load-code-loop
							(+ beat dur) 
							dur)))

(load-code-loop (*metro* 'get-beat 4) 1/4)


;;------------------------------------------







































































;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; (sys:load "libs/xtm.xtm")

;; (sys:load "libs/external/cairo.xtm")

;; (define width 800.0)
;; (define height 600.0)
;; (bind-val width float 800.0)
;; (bind-val height float 600.0)
;; (bind-val half_width float (/ width 2.0))
;; (bind-val half_height float (/ height 2.0))
;; (define fullscreen #f)






;; ;;;;;;;;;;Testing Code Helper;;;;;;


;; (load_code "research-project/test.xtm")

;; (bind-func print_codetree
;; 	(lambda ()
;; 		(printf "%s\n" "printing")
;; 		(codetree_print_top_level code)))

;; (print_codetree)

;; ;;;;;;;;;;;;;;;;

;; (bind-func draw_graph
;; 	(lambda (cr graph)
;; 		(let ((i 0)
;; 				(x (ftod (+ half_width (codegraph_get_x graph))))
;; 				(y (ftod (+ half_height (codegraph_get_y graph))))
;; 				(children (codegraph_get_child_count graph))
;; 				(size (+ 3.0 (* 0.004 (i64tod (strlen (codegraph_get_code graph))))));;(+ 1.0 (ftod (codegraph_get_size graph))))
;; 				(type (codegraph_get_type graph))
;; 				)

;; 			;;(printf "%d\n" (strlen (codegraph_get_code graph)))
;; 			(dotimes (i children)
;; 				;;(printf "%d" i)
;; 				(let ((child (codegraph_get_child graph i))
;; 						(xc (ftod (+ half_width (codegraph_get_x child))))
;; 						(yc (ftod (+ half_height (codegraph_get_y child)))))

;; 						;;(if (= type 1) (cairo_set_source_rgba cr 1.0 1.0 1.0 0.0) (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0))
;; 						(cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
;; 						(cairo_set_line_width cr 2.0)
;; 						(cairo_move_to cr x y)
;; 						(cairo_line_to cr xc yc)
;; 						(cairo_stroke cr)
;; 						(draw_graph cr child)

;; 					))

;; 			;;(printf "%d\n" type)
;; 			;;(printf "%d\n" type)
;; 			(cond ((= type 5) ;;function
;; 						(cairo_set_source_rgba cr 0.0 0.0 1.0 1.0)
;; 					)
;; 					((= type 1) ;;root
;; 						(cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
;; 						;;(println (codegraph_get_x graph))
;; 					)
;; 					((= type 4)
					
;; 						(cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
;; 						(cairo_set_font_size cr 10.0)
;; 						(cairo_move_to cr x y)
;; 						;;(cairo_show_text cr (codetree_get_code (codegraph_get_code graph)))
;; 						(cairo_set_source_rgba cr 1.0 1.0 0.0 1.0)
;; 					)
;; 						(else 
;; 					(cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
;; 							)
;; 						)

;; 			;;(cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
;; 			(cairo_arc cr x y (* 2.0 size) 0.0 TWOPI)
;; 			(cairo_fill cr)
;; 			(cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
;; 			(cairo_arc cr x y (* 2.0 size) 0.0 TWOPI)
;; 			(cairo_stroke cr)  		
		
;; 		void
;; 		)))

;; ;; Should be redefined in each visualisation
;; (bind-func draw
;; 	(lambda (cr t:double graph)
;; 	(codegraph_step graph 1.0)
;; 	(cairo_set_source_rgba cr 0.0 0.0 0.0 1.0)
;; 	(cairo_paint cr)
;; 	(load_code "research-project/test.xtm")
;; 	(codegraph_update graph code)
;; 	(draw_graph cr graph)
;; 		void))


;; (bind-func gl_draw
;; 	(let ((surface (cairo_image_surface_create CAIRO_FORMAT_RGB24 (convert  width) (convert  height)))
;; 				(cr (cairo_create surface))
;; 				(code (codetree_create "research-project/test.xtm"))
;; 				(graph (codegraph_create code)))
;; 	(lambda ()
;; 		(glLoadIdentity)
;; 		(draw cr (i64tod (now)) graph)
;; 		(gl_load_tex_bgr (convert width) (convert height) 4 GL_UNSIGNED_BYTE (cairo_image_surface_get_data surface) 5)
;; 		(gl_draw_img_reverse -1.0 -1.0 2.0 2.0 180.0 5)
;; 		void)))

;; (define draw-loop
;; 	(lambda (beat dur)
;; 		(gl_draw)
;; 		(gl:swap-buffers ctx)        
;; 		(callback (*metro* (+ beat (* .5 dur)))
;; 							'draw-loop
;; 							(+ beat dur) 
;; 							dur)))

;; ;; create the graphics context
;; (define ctx (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))

;; ;; start the animation loop (check the args are ok)
;; (draw-loop (*metro* 'get-beat 4) 1/40)



;; ;;-------------------------------------

;; ;; Code Introspection Stuff

;; ;; (define func-name
;; ;; 	(let ((x 2))
;; ;; 	(lambda (test)
;; ;; 		x
;; ;; 		42
;; ;; 		)))

;; ;; (get-closure-code func-name)
;; ;; (get-eldoc-string func-name)

