(bind-type CodeCache <i64,String*>)

;;;;;;;;;;;;;;;

(bind-func codecache_get_time
  (lambda (cc:CodeCache*)
    (tref cc 0)))

(bind-func codecache_get_text
  (lambda (cc:CodeCache*)
    (tref cc 1)))

(bind-func codecache_set_time
  (lambda (cc:CodeCache* time:i64)
    (tset! cc 0 time)))

(bind-func codecache_set_text
  (lambda (cc:CodeCache* text:String*)
    (tset! cc 1 text)))

;;;;;;;;;;;;;;;;

(bind-val CODE_CACHE_LIST List:<CodeCache*,List*>*)

(bind-func codecache_list_init
  (lambda ()
    (let ((n:List:<CodeCache*,List*>* null))
      (set! CODE_CACHE_LIST n))))

(codecache_list_init)

;;;;;;;;;;;;;;;;

(bind-func codecache_list_add
  (lambda (time:i64 text:i8*)
    (set! CODE_CACHE_LIST (cons (CodeCache time (Str text))
                        CODE_CACHE_LIST))))

(bind-func codecache_list_remove
  (lambda (time:i64)
    (set! CODE_CACHE_LIST (filter (lambda (cc)
        (not (equal time (codecache_get_time cc))))
              CODE_CACHE_LIST))))

;; Finds the code for a certain time
(bind-func codecache_list_find
  (lambda (time:i64)
    (let ((found (filter (lambda (cc)
            (equal time (codecache_get_time cc)))
                CODE_CACHE_LIST))
          (len (length found)))
      ;; (print len)
      (if (= len 0) null (car found))
    )))

(bind-func codecache_list_size
  (lambda ()
    (length CODE_CACHE_LIST)))

(codecache_list_size)

;; (codecache_list_add 1000 "test")

;; (codecache_list_find 1001)
