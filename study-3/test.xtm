(define speaker
  (lambda (beat dur i)
    (play speech (* 10 (+ i 1)) (cosr 50 20 1/2) dur 2)
    (callback (*metro* (+ beat (* .5 dur))) 'speaker (+ beat dur)
              dur
              (if (< i 6) (+ i 1) 0))))

(speaker (*metro* 'get-beat 4) 1/4 0)

(define drums
  (lambda (beat dur)
    (play kit (cosr 43 3 1/8) (cosr 60 30 1) .1)
    (play kit (cosr 53 7 1/7) (cosr 60 30 1) .1)
    (play kit *gm-open-hi-hat* (cosr 70 10 2) .1 1)
    (if (= (modulo beat 1) 0) (play kit *gm-kick* 110 .1 1))
    (if (= (modulo beat 2) 1) (play kit *gm-snare-2* 110 .1 1))
    (callback (*metro* (+ beat (* .5 dur))) 'drums (+ beat dur) dur)))

(drums (*metro* 'get-beat 4) 1/4)

(define chords
  (lambda (beat dur root)
    (for-each (lambda (p)
                (play (random (list 0 0 1/4 1/2))
                      rhodes p 90 dur (random 3)))
              (pc:make-chord 50 75 7
                             (pc:chord root (random (cdr (assoc root '((0 -9)
                                                                       (3 ^9)
                                                                       (10 7))))))))
    (play subbass (+ root 36) 80 dur)
    (callback (*metro* (+ beat (* .5 dur))) 'chords (+ beat dur)
              (if (< (modulo beat 16) 4)
                  2 4)
              (random (cdr (assoc root '((0 3)
                                         (3 10)
                                         (10 0))))))))

(chords (- (*metro* 'get-beat 4) 1/2) 4 0)

(define libname (sys:open-dylib "/Users/ben/Code/xtm/dylibs/libname.dylib"))
(load "libs/core/libname.xtmh")

(map1 (lambda ((map (lambda (map2 1 213 23 2 2342 23 4 293  293482 9234 (map ( (map)))))))))


(map (lambda ((map (lambda (map (map (lambda (map)))))))))
;; cheers
;;
;; ben.swift@anu.edu.au
;; http://benswift.me
