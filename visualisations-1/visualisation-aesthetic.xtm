
(bind-func draw_vu_circle
  (lambda (cr cx cy vu_index r g b)
    (cairo_set_source_rgba cr r g b 1.0)
    (cairo_arc cr cx cy (if (> (vu_level vu_index) 0.000000005) (+ 1.0 (* 20000.0 (ftod (vu_level vu_index)))) 0.0) 0.0 TWOPI)
    (cairo_stroke cr)

    (cairo_set_source_rgba cr r g b 0.2)
    (cairo_arc cr cx cy (if (> (vu_level vu_index) 0.000000005) (+ 1.0 (* 20000.0 (ftod (vu_level vu_index)))) 0.0) 0.0 TWOPI)
    (cairo_fill cr)))

(bind-func draw
  (lambda (cr t:double)
    (let ((radius:double 100.0)
          (half_w:double (convert (/ width 2.0)))
          (half_h:double (convert (/ height 2.0))))
      (cairo_set_source_rgba cr 0.0 0.0 0.0 0.02)
      (cairo_paint cr)
      (cairo_set_line_width cr (random 1.0 10.))
      (draw_vu_circle cr (+ half_w (* radius (cos t))) (+ half_h (* radius (sin t))) 0 1.0 0.0 0.0)
      (draw_vu_circle cr (+ half_w (* (* 2.0 radius) (cos t))) (+ half_h (* (* 2.0 radius) (sin t))) 1 0.0 1.0 0.0)
      (draw_vu_circle cr (+ half_w (* (* 3.0 radius) (cos t))) (+ half_h (* (* 3.0 radius) (sin t))) 2 0.0 0.0 1.0))))

