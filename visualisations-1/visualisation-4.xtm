

(sys:load "libs/external/drawtext.xtm")
(sys:load "libs/external/cairo.xtm")

(define xtlang-parse (sys:open-dylib "xtlang-parse.dylib"))

(bind-val BUFFER_SIZE i32 1000000)
(bind-val BUFFER i8*)
(bind-type code <i8*,i32,i32,i32,double,|10,i8*|,|10,i32|,i32>)
(bind-val c code)

(bind-lib xtlang-parse load [code,i8*,i8*,i32]*)

(bind-func alloc-buffer
  (lambda ()
  	(memzone 10000000
    	(let ((x:i8* (zalloc BUFFER_SIZE)))
    		(set! BUFFER x)))))

(bind-func load-code
  (lambda ()
    (let ((cl (load "vis.cache" BUFFER BUFFER_SIZE)))
    		(set! c cl)
    		void)))

(bind-func get-time
  (lambda ()
  	(tref c 5)))

(bind-func get-text
  (lambda ()
  	(tref c 0)))

(bind-func get-func-text0
  (lambda (index:i64)
    (aref (tref c 5) 0)))
(bind-func get-func-text1
  (lambda (index:i64)
    (aref (tref c 5) 1)))
(bind-func get-func-text2
  (lambda (index:i64)
    (aref (tref c 5) 2)))
(bind-func get-func-text3
  (lambda (index:i64)
    (aref (tref c 5) 3)))

(bind-func get-func-count
  (lambda ()
    (tref c 7)))



(load-code)



(define ctx (gl:make-ctx ":0.0" #f 0.0 0.0 900.0 600.0))

(sys:load "libs/external/cairo.xtm")

(bind-func cairo_draw
  (let ((surface (cairo_image_surface_create CAIRO_FORMAT_RGB24 900 600))
  (cr (cairo_create surface)) 
  (i 0.0))
    (lambda (t:double)
      (cairo_set_source_rgb cr 0.1 0.1 0.05)
      (cairo_paint cr)
      

      (dotimes (i 20.0)
        (cairo_set_source_rgba cr (* .05 i) (* 0.05 i) 0.7 1.0)
        
        (cairo_arc cr
             (+ 450.0 (* 350.0 (cos (* i t .00000003))))
             (+ 300.0 (* 200.0 (sin (* i t .0000002))))
             10.0 0.0 TWOPI)
        ;;(cairo_line_to cr 100.0 300.0)
        (cairo_stroke cr))

      (cairo_set_source_rgb cr 1.0 0.1 0.05)
      (cairo_move_to cr 100.0 300.0)
      (cairo_set_font_size cr 15.0)
      ;;(cairo_show_text cr (get-func-text0 0))
      (cairo_show_text cr "test\ntest2\ntest3")


      ;(cairo_surface_flush surface)
      (cairo_image_surface_get_data surface))))
        

(bind-func gl_draw
  (lambda ()
    (glLoadIdentity)
    (gl_load_tex_bgr 900 600 4 GL_UNSIGNED_BYTE (cairo_draw (i64tod (now))) 5)
    (gl_draw_img_reverse -1.0 -1.0 2.0 2.0 180.0 5)
    void))

(define cairo-animation
  (lambda (beat dur)
    (gl_draw)
    (gl:swap-buffers ctx)    
    (callback (*metro* (+ beat (* .5 dur))) 'cairo-animation (+ beat dur) dur)))

(cairo-animation (*metro* 'get-beat 4) 1/20)


