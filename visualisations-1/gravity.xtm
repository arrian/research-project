

(bind-val g float 9.81)

(bind-type vec2 <float,float>)

(bind-type object <vec2,vec2,float>);<position,velocity,mass>

(bind-val OBJECTS |200,object*|)

(bind-func object_create
  (lambda ()
  	(let ((obj:object* (halloc))
  		  (pos:vec2* (halloc))
  		  (vel:vec2* (halloc)))
  		(tfill! obj pos vel 100.0)
  		(aset! OBJECTS 0 obj))))
(object_create)

(bind-func get_object_position
  (lambda ()
    ))

(println (aref OBJECTS 0))

(bind-func vec2_mult
  (lambda (v:vec2* factor:float)
  	(tset! v 0 (* factor (tref v 0)))
  	(tset! v 1 (* factor (tref v 1))))
    (v))

(bind-func vec2_add
  (lambda (v1:vec2* v2:vec2*)
  	(tset! v2 0 (+ (tref v1 0) (tref v2 0)))
  	(tset! v2 1 (+ (tref v1 1) (tref v2 1))))
    (v))

(bind-func distance
  (lambda (a:vec2* b:vec2*)
		(sqrt (+ (pow (- (tref a 0)
			(tref b 0))
			2.0)
			(pow (- (tref a 1)
			(tref b 1))
			2.0)))))

(bind-func gravity
  (lambda (p1_pos:vec2* p2_pos:vec2* p1_mass:float p2_mass:float)
    	(let ((d:float (distance p1_pos p2_pos))
    		(/ (* g (* p1_mass p2_mass)) (* d d))))))

(bind-func add_force
  (lambda (obj:object* force:vec2* dt:float)
  		(vec2_add (vec2_mult (vec2_mult force (/ 1.0 (tref obj 2))) dt) (tref obj 1))))











const float g = 9.81f;  // Gravity of Earth in m/sÂ²
float gravity(Vec3 p1_pos, Vec3 p2_pos, float p1_mass, float p2_mass)
{
    float distance = (p2_pos - p1_pos).length();
    return g * p1_mass * p1_mass / (distance*distance);
}



struct object
{
    Vec3 pos;
    Vec3 vel;
    float mass;

    void add_force(Vec3 force);
};

void object::add_force(Vec3 force, float dt)
{
    vel += (force / mass) * dt;
}