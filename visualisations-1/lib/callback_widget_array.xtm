;; This implements storing callback widgets in an array. Replace with the list version.
;; 0 name
;; 1 initial callback time (now-based)
;; 2 previous callback time (now-based)
;; 3 next callback time (now-based)
(bind-type CallbackWidget <String*,i64,i64,i64>)

(bind-val CW_ARRAY |100,CallbackWidget*|*)
(bind-val CW_ARRAY_MAX i64 100)
(bind-val CW_ARRAY_CURRENT i64 0)

(bind-func cw_get
  (lambda (cw_index:i64)
    (aref CW_ARRAY cw_index)))

(bind-func cw_name
  (lambda (cw_index:i64)
    (cstr_from_string (tref (cw_get cw_index) 0))))

(bind-func cw_set_name
  (lambda (cw_index:i64 name:i8*)
    (tset! (cw_get cw_index) 0 (Str name))))

(bind-func cw_print_name
  (lambda (cw_index:i64)
      (printf "%s\n" (cw_name cw_index))
    ))

(bind-func cw_initial_time
  (lambda (cw_index:i64)
    (tref (cw_get cw_index) 1)))

(bind-func cw_previous_time
  (lambda (cw_index:i64)
    (tref (cw_get cw_index) 2)))

(bind-func cw_next_time
  (lambda (cw_index:i64)
    (tref (cw_get cw_index) 3)))

(bind-func cw_set_next_time
  (lambda (cw_index:i64 cb_time:i64)
    (let ((cw (cw_get cw_index)))
      (if (null? cw)
          (begin (println "trying to set time for null widget at index " cw_index)
                 void)
          (begin
            (tset! cw 2 (cw_next_time cw_index))
            (tset! cw 3 cb_time)
            void)))))

(bind-func cw_duration
  (lambda (cw_index:i64)
    (- (cw_next_time cw_index) (cw_previous_time cw_index))))

(bind-func cw_progress
  (lambda (cw_index:i64)
    (let ((diff:i64 (- (cw_next_time cw_index) (cw_previous_time cw_index))))
      (if (equal (cw_next_time cw_index) (cw_previous_time cw_index)) 0.0
        (/ (i64tod (modulo (- (now) (cw_initial_time cw_index)) diff)) (i64tod diff))))))

(bind-func cw_add
  (lambda (name:i8* time:i64)
    (let ((widget:CallbackWidget* (halloc)))
      (tset! widget 0 (Str name))
      (tset! widget 1 time)
      (tset! widget 2 time)
      (tset! widget 3 time)
      (aset! CW_ARRAY CW_ARRAY_CURRENT widget)
      (set! CW_ARRAY_CURRENT (+ CW_ARRAY_CURRENT 1))
      (- CW_ARRAY_CURRENT 1)
      void)
    ))

(bind-func cw_check
  (lambda (name:i8* time:i64)
    (let ((i 0)
          (exists:i1 #f)
          (index -1))
      (dotimes (i CW_ARRAY_CURRENT)
        (if (= (strcmp name (cw_name i)) 0)
            (begin (set! exists #t)
                   (set! index i))))
      (if exists
          (begin (cw_set_next_time index time) void)
          (cw_add name time)))
    void))

(bind-func cw_is_active
  (lambda (cw_index:i64)
    (<= (now) (+ (cw_duration cw_index) (cw_next_time cw_index)))));;

(bind-func cw_active_count
  (lambda ()
    (let ((i:i64 0) (count:i64 0))
    (dotimes (i CW_ARRAY_CURRENT)
      (if (cw_is_active i) (set! count (+ 1 count))))
    count)))

;; Get the active widget from a 0 index (eg. if widget 
;; indexed as 3 is the first active widget then call (cw_get_active 0))
;; An index too high will return the last active widget in the array
(bind-func cw_get_active
  (lambda (number:i64)
    (let ((i 0)
          (count 0)
          (found 0))
    (dotimes (i CW_ARRAY_CURRENT)
        (if (and (cw_is_active i) (<= count number)) (begin (set! count (+ count 1)) (set! found i) void) void))
    found)))

;;(println (cw_get_active 1))

;;Needs beat, duration and widget index (TODO: should default to -1)
(define cv-callback
  (lambda (time cb-sym . args)
      (cw_check (symbol->string cb-sym) (real->integer time))
      (apply callback 
        (cons time (cons cb-sym args)))))
