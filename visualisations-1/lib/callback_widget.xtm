;; 0 name
;; 1 next callback time (now-based)
(bind-type CallbackWidget <String*,i64>)

(bind-func cw_name
  (lambda (cbw:CallbackWidget*)
    (tref cbw 0)))

(bind-func cw_set_name
  (lambda (cbw:CallbackWidget* name:String*)
    (tset! cbw 0 name)))

(bind-func cw_cb_time
  (lambda (cbw:CallbackWidget*)
    (tref cbw 1)))

(bind-func cw_set_cb_time
  (lambda (cbw:CallbackWidget* cb_time:i64)
    (tset! cbw 1 cb_time)))

(bind-val CW_LIST List:<CallbackWidget*,List*>*)

(bind-func cw_master_list_init
  (lambda ()
    (let ((n:List:<CallbackWidget*,List*>* null))
      (set! CW_LIST n))))

(cw_master_list_init)

(bind-func cw_add_widget
  (lambda (name cb_time)
    (set! CW_LIST (cons (CallbackWidget name cb_time)
                        CW_LIST))))

(bind-func cw_remove_widget
  (lambda (name)
    (set! CW_LIST (filter (lambda (cbw)
                            (not (equal name (cw_name cbw))))
                          CW_LIST))))

(bind-func cw_draw
  (lambda (cbw:CallbackWidget* phase:double)
    (println "name:" (cw_name cbw) "phase:" phase)
    void))

(bind-func draw_loop
  (lambda (time delta_t)
    (for-each (lambda (cbw) (cw_draw cbw (convert (cw_cb_time cbw)))) CW_LIST)
    (if #t ; set to #f to cancel the recursion
        (callback (+ time (convert (* SR delta_t 0.5)))
                  draw_loop
                  (+ time (convert (* SR delta_t)))
                  delta_t))
    void))

(draw_loop (now) 0.5)

;; testing

(bind-func cw_add_widget_wrapper
  (lambda (name:i8* cb_time)
    (cw_add_widget (Str name) cb_time)))

(cw_add_widget_wrapper (random (list "foo" "bar" "baz")) (random 100))
