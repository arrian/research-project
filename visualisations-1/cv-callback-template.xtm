(define cv-callback
  (lambda (time cb-sym . args)
    (print "I'm in the cv-callback " time cb-sym args "\n")
    ;; do whatever you want in here

    ;; you can also assume that the first two elements of args will be
    ;; the next `beat' value and the dur value
    (apply callback (cons time (cons cb-sym args)))))

(define foo
  (lambda (beat dur x y)
    
    (cv-callback (*metro* (+ beat (* .5 dur))) 'foo (+ beat dur) dur x y)))

(foo (*metro* 'get-beat 4) 1 (random 4) (random 6))

(define bar
  (lambda (beat dur x y)
    
    (cv-callback (*metro* (+ beat (* .5 dur))) 'bar (+ beat dur) dur x y)))

(bar (*metro* 'get-beat 4) 1 (random 4) (random 6))
