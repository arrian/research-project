
;;progression
;;one large clock no fill ;;2 clocks one over the other filled ;; 3 base fill clocks ;;4 clocks lines of segments

;;progression #4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(bind-func draw_clock_segments
  (lambda (cr radius:double x:double y:double percent:double segments:double)
	(let ((i:double 0.0)
		  (seg_angle:double (/ TWOPI segments))
		  (draw_segments:double (ceil (* segments percent))))
			(cairo_move_to cr x y)
		    (cairo_set_source_rgba cr 1.0 (* 250.0 (ftod (vu_level 1))) 0.0 1.0)
		    (cairo_arc cr x y radius (* draw_segments seg_angle) (+ seg_angle (* draw_segments seg_angle)))
		    (cairo_fill cr)
		    )))

(bind-func cw_draw
  (lambda (cr:cairo_t* widget_index:i64 phase:double x:double y:double radius:double)
		    (draw_clock_segments cr (+ 20.0 (* 50000.0 (ftod (vu_level 1)))) x y (cw_progress widget_index) 6.0)
		    (cairo_set_font_size cr 20.0)
		    (cairo_move_to cr (- x 80.0) (+ y 140.0))
		    (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
		    (cairo_show_text cr (cw_name widget_index))
		    void))

(bind-func cw_array_draw
  (lambda (cr:cairo_t*)
    (let ((i 0) 
    	  (centre:double (/ (i32tod (cairo_image_surface_get_width (cairo_get_target cr))) 2.0))
    	  (xStart:double (- centre (* 0.5 210.0 (i64tod (- CW_ARRAY_CURRENT 1)))))
    	  (yCentre:double (/ (i32tod (cairo_image_surface_get_height (cairo_get_target cr))) 2.0)))
    	;;(print CW_ARRAY_CURRENT)
        (dotimes (i CW_ARRAY_CURRENT)
            (cw_draw cr i (random) (+ xStart (* (i64tod i) 210.0)) yCentre 90.0)))))

(bind-func draw
  (lambda (cr:cairo_t* t:double)
		(cairo_set_source_rgba cr 0.0 0.0 0.0 0.02)
		(cairo_paint cr)
		(cw_array_draw cr)
    void))

;;progression #3 - may be better placed in the aesthetic visualisations
(bind-func draw_clock
  (lambda (cr radius x y percent)
  	(let ((half_chord:double (sqrt (- (* radius radius) (* (- radius (* 2.0 radius percent)) (- radius (* 2.0 radius percent))))))
  		  (angle:double (* 2.0 (asind (/ half_chord radius))))
  		  (start_angle:double (- (* PI 0.5) (* angle 0.5)))
  		  (end_angle:double (+ (* PI 0.5) (* angle 0.5))))

    (cairo_move_to cr (+ x (- radius (* 2.0 radius percent))) (+ y half_chord))
    (cairo_set_source_rgba cr 1.0 (random) (random) 0.3)
    (cairo_arc cr x y radius start_angle end_angle)
    (cairo_line_to cr (+ x radius) y)
    (cairo_fill cr)

    void)))

;;progression #2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(bind-func draw_clock
  (lambda (cr radius x y percent)
    (cairo_move_to cr (+ x radius) y)
    (cairo_set_source_rgba cr 1.0 (random) (random) 0.3)
    (cairo_arc cr x y radius 0.0 (if (>= percent 0.95) TWOPI (* TWOPI percent)))
    (cairo_line_to cr (+ x radius) y)
    (cairo_fill cr)

    void))

;; ;;progression #? - includes vu_meter
;; (bind-func draw_clock
;;   (lambda (cr radius:double x y percent)

;; 	(cairo_set_line_width cr 4.0)
;;     (cairo_move_to cr (+ 4.0 (if (> (vu_level 1) 0.000000005) (+ 1.0 (* 30000.0 (ftod (vu_level 1)))) 0.0) x) y)
;;     (cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
;;     (cairo_arc cr x y (+ 4.0 (if (> (vu_level 1) 0.000000005) (+ 1.0 (* 30000.0 (ftod (vu_level 1)))) 0.0)) 0.0 (if (>= percent 0.95) TWOPI (* TWOPI percent)))
;;     (cairo_stroke cr)
;;     void))

;;progression #1
(bind-func draw_clock
  (lambda (cr radius:double x y percent)
    (cairo_move_to cr x y)
    (cairo_set_source_rgba cr 1.0 0.0 0.0 0.3)
    (cairo_arc cr x y radius 0.0 (if (>= percent 0.95) TWOPI (* TWOPI percent)))
    (cairo_fill cr)

	(cairo_set_line_width cr 4.0)
    (cairo_move_to cr (+ 4.0 radius x) y)
    (cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
    (cairo_arc cr x y (+ 4.0 radius) 0.0 (if (>= percent 0.95) TWOPI (* TWOPI percent)))
    (cairo_stroke cr)
    void))

;;initial
(bind-func draw_clock
  (lambda (cr radius:double x y percent)

	(cairo_set_line_width cr 10.0)
    (cairo_move_to cr (+ 4.0 radius x) y)
    (cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
    (cairo_arc cr x y (+ 4.0 radius) 0.0 (if (>= percent 0.95) TWOPI (* TWOPI percent)))
    (cairo_stroke cr)
    void))

;;draw n clocks
(bind-func cw_draw
  (lambda (cr:cairo_t* widget_index:i64 phase:double x:double y:double radius:double)
		    (draw_clock cr radius x y (cw_progress widget_index))
		    (cairo_set_font_size cr 20.0)
		    (cairo_move_to cr (- x 80.0) (+ y 140.0))
		    (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
		    (cairo_show_text cr (cw_name widget_index))
		    void))

(bind-func cw_array_draw
  (lambda (cr:cairo_t*)
    (let ((i 0) 
    	  (centre:double (/ (i32tod (cairo_image_surface_get_width (cairo_get_target cr))) 2.0))
    	  (xStart:double (- centre (* 0.5 210.0 (i64tod (- CW_ARRAY_CURRENT 1)))))
    	  (yCentre:double (/ (i32tod (cairo_image_surface_get_height (cairo_get_target cr))) 2.0)))
        (dotimes (i CW_ARRAY_CURRENT)
        	(cond ((equal CW_ARRAY_CURRENT 1) (cw_draw cr i (random) (+ xStart (* (i64tod i) 210.0)) yCentre (* 0.5 (/ (ftod height) 3.0))))
  			      ((equal CW_ARRAY_CURRENT 2) (cw_draw cr i (random) centre yCentre (if (equal i 1) (* 1.0 (/ (ftod height) 3.0)) (* 0.7 (/ (ftod height) 3.0)))))
  			      (else (cw_draw cr i (random) (+ xStart (* (i64tod i) 210.0)) yCentre (* 0.9 0.5 (/ (ftod width) (i64tod CW_ARRAY_CURRENT))))))))))

(bind-func draw
  (lambda (cr:cairo_t* t:double)
		(cairo_set_source_rgba cr 0.0 0.0 0.0 0.07)
		(cairo_paint cr)
		(cw_array_draw cr)
    void))


