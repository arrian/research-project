
(sys:load "libs/external/cairo.xtm")
(sys:load "libs/external/vu-meter.xtm")

(define ctx (gl:make-ctx ":0.0" #f 0.0 0.0 900.0 600.0))

(bind-func draw_circle_reactive
  (lambda (cr j:double count:double r:double g:double b:double cx:double cy:double seg_size:double k:double)
          (dotimes (j count)
            (cairo_set_source_rgba cr r (/ j count) b 1.0)
            (cairo_move_to cr cx cy)
            (cairo_arc cr cx cy (+ 200.0 (* 20000.0 (ftod (vu_level (if (= (modulo j 2.0) 0.0) 1 2))))) (+ k (* j seg_size)) (+ k seg_size (* j seg_size)))
            ;;(cairo_line_to cr 100.0 300.0)
            (cairo_close_path cr)
            (cairo_fill cr))

          (let ((i 0.0))
        (dotimes (i 50.0)
          (let ((current:double (* (* 2.0 (cos i)) (+ (* i 10.0) (* i 80.0 (ftod (vu_total)))))))
                (cairo_move_to cr cx cy)
                (cairo_set_source_rgba cr 1.0 1.0 0.4 (/ 0.5 (+ 1.0 i)))
                (cairo_arc cr cx cy current 0.0 TWOPI)
                (cairo_fill cr))))
    ))

(bind-func draw
  (lambda (cr t:double k:double)
    (cairo_set_line_width cr 1.0)
        
    (let ((count:double 10.0)
          (seg_size:double (/ TWOPI 10.0))
          (j:double 0.0))

      (draw_circle_reactive cr j count 0.0 1.0 1.0 450.0 300.0 seg_size k)
      )))

(bind-func cairo_draw
  (let ((surface (cairo_image_surface_create CAIRO_FORMAT_RGB24 900 600))
  (cr (cairo_create surface)))
    (lambda (t:double k:double)
      (cairo_set_source_rgba cr 0.0 0.0 0.0 1.0)
      (cairo_paint cr)
      (draw cr t k)
      ;(cairo_surface_flush surface)
      (cairo_image_surface_get_data surface))))
        
(bind-func gl_draw
  (lambda (k:double)
    (glLoadIdentity)
    (gl_load_tex_bgr 900 600 4 GL_UNSIGNED_BYTE (cairo_draw (i64tod (now)) k) 5)
    (gl_draw_img_reverse -1.0 -1.0 2.0 2.0 180.0 5)
    void))

(define cairo-animation
  (lambda (beat dur k)
    (gl_draw k)
    (gl:swap-buffers ctx)    
    (callback (*metro* (+ beat (* .5 dur))) 'cairo-animation (+ beat dur) dur (+ 0.00 k))))

(cairo-animation (*metro* 'get-beat 4) 1/20 0 0.0)


;;--------------------------------------------------------------

(define-sampler kit sampler_note_hermite_c sampler_fx)

(bind-func dsp:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* 100000
  ;; VU metering at 30Hz, 4 distinct channels
  (let ((vu_meter (vu_meter_c 8 (/ 44100 15))))
    (lambda (in time chan dat)
      (+ 
         (vu_meter chan 1 (epad in time chan dat))
         (vu_meter chan 2 (fmsynth in time chan dat))
         (vu_meter chan 0 (* 2.0 (kit in time chan dat)))
         ))))

(dsp:set! dsp)

(define fmsynth_instrument
  (lambda (beat dur)
    (play-note (now) fmsynth (random '(78 82 97 99 94)) 68 10000)
    (callback (*metro* (+ beat (* 1.0 dur))) 'fmsynth_instrument (+ beat dur) dur)))

(fmsynth_instrument (*metro* 'get-beat 4) 1/2)


(define epad_instrument
  (lambda (beat dur)
    (play-note (now) epad (random '(77 82 85)) 83 2000)
    (callback (*metro* (+ beat (* 4.0 dur))) 'epad_instrument (+ beat dur) dur)))

(epad_instrument (*metro* 'get-beat 4) 1/4)


;;------------------------------
(define *user-sample-dir* "/Users/arrian/Projects/Music/Assets/samples")
(load "/Users/arrian/Dev/extempore-hackday/sampler-maps.xtm")

(sm-load-map kit *808-kit-map*)

(play-note (now) kit (random '(46 47)) 80 44100)

(define drumloop
  (lambda (beat dur)
    (if (= (modulo beat 1) 0)
        (play kit (random 46 64) 120 dur))
    (if (= (modulo beat 1/2) 0)
      
        (play kit (random 47 55) 90 dur))
    (if (= (modulo beat 1/1) 0)
      (play kit 54 100 (* 2.0 dur)))
    (callback (*metro* (+ beat (* .5 dur))) 'drumloop (+ beat dur) dur)))

(define drumloop
  (lambda (beat dur)
    (if (= (modulo beat 4) 0) 
      (play kit 54 120 dur))
    (if (= (modulo beat 3) 0)
        (play kit 52 120 dur))
    (if (= (modulo beat 2) 0)
        (play kit 67 90 dur))
    (callback (*metro* (+ beat (* .5 dur))) 'drumloop (+ beat dur) dur)))


(drumloop (*metro* 'get-beat 4) 1/4)


